# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from remote_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from remote_python_sdk.api_response import AsyncGeneratorResponse
from remote_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401

from remote_python_sdk.model.conflict_response import ConflictResponse as ConflictResponseSchema
from remote_python_sdk.model.not_found_response import NotFoundResponse as NotFoundResponseSchema
from remote_python_sdk.model.pricing_plan_details import PricingPlanDetails as PricingPlanDetailsSchema
from remote_python_sdk.model.unprocessable_entity_response import UnprocessableEntityResponse as UnprocessableEntityResponseSchema
from remote_python_sdk.model.employment_response import EmploymentResponse as EmploymentResponseSchema
from remote_python_sdk.model.too_many_requests_response import TooManyRequestsResponse as TooManyRequestsResponseSchema
from remote_python_sdk.model.country import Country as CountrySchema
from remote_python_sdk.model.bad_request_response import BadRequestResponse as BadRequestResponseSchema
from remote_python_sdk.model.employment_full_params import EmploymentFullParams as EmploymentFullParamsSchema
from remote_python_sdk.model.unauthorized_response import UnauthorizedResponse as UnauthorizedResponseSchema

from remote_python_sdk.type.conflict_response import ConflictResponse
from remote_python_sdk.type.too_many_requests_response import TooManyRequestsResponse
from remote_python_sdk.type.not_found_response import NotFoundResponse
from remote_python_sdk.type.bad_request_response import BadRequestResponse
from remote_python_sdk.type.country import Country
from remote_python_sdk.type.employment_response import EmploymentResponse
from remote_python_sdk.type.pricing_plan_details import PricingPlanDetails
from remote_python_sdk.type.unprocessable_entity_response import UnprocessableEntityResponse
from remote_python_sdk.type.employment_full_params import EmploymentFullParams
from remote_python_sdk.type.unauthorized_response import UnauthorizedResponse

from ...api_client import Dictionary
from remote_python_sdk.pydantic.too_many_requests_response import TooManyRequestsResponse as TooManyRequestsResponsePydantic
from remote_python_sdk.pydantic.conflict_response import ConflictResponse as ConflictResponsePydantic
from remote_python_sdk.pydantic.not_found_response import NotFoundResponse as NotFoundResponsePydantic
from remote_python_sdk.pydantic.country import Country as CountryPydantic
from remote_python_sdk.pydantic.pricing_plan_details import PricingPlanDetails as PricingPlanDetailsPydantic
from remote_python_sdk.pydantic.unprocessable_entity_response import UnprocessableEntityResponse as UnprocessableEntityResponsePydantic
from remote_python_sdk.pydantic.unauthorized_response import UnauthorizedResponse as UnauthorizedResponsePydantic
from remote_python_sdk.pydantic.employment_response import EmploymentResponse as EmploymentResponsePydantic
from remote_python_sdk.pydantic.bad_request_response import BadRequestResponse as BadRequestResponsePydantic
from remote_python_sdk.pydantic.employment_full_params import EmploymentFullParams as EmploymentFullParamsPydantic

from . import path

# Path params
EmploymentIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'employment_id': typing.Union[EmploymentIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_employment_id = api_client.PathParameter(
    name="employment_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=EmploymentIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = EmploymentFullParamsSchema


request_body_employment_full_params = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
_auth = [
    'OAuth2',
    'OAuth2',
]
SchemaFor200ResponseBodyApplicationJson = EmploymentResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: EmploymentResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: EmploymentResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = BadRequestResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: BadRequestResponse


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: BadRequestResponse


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor401ResponseBodyApplicationJson = UnauthorizedResponseSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: UnauthorizedResponse


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: UnauthorizedResponse


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor404ResponseBodyApplicationJson = NotFoundResponseSchema


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: NotFoundResponse


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: NotFoundResponse


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)
SchemaFor409ResponseBodyApplicationJson = ConflictResponseSchema


@dataclass
class ApiResponseFor409(api_client.ApiResponse):
    body: ConflictResponse


@dataclass
class ApiResponseFor409Async(api_client.AsyncApiResponse):
    body: ConflictResponse


_response_for_409 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor409,
    response_cls_async=ApiResponseFor409Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor409ResponseBodyApplicationJson),
    },
)
SchemaFor422ResponseBodyApplicationJson = UnprocessableEntityResponseSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: UnprocessableEntityResponse


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: UnprocessableEntityResponse


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
SchemaFor429ResponseBodyApplicationJson = TooManyRequestsResponseSchema


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    body: TooManyRequestsResponse


@dataclass
class ApiResponseFor429Async(api_client.AsyncApiResponse):
    body: TooManyRequestsResponse


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
    response_cls_async=ApiResponseFor429Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '404': _response_for_404,
    '409': _response_for_409,
    '422': _response_for_422,
    '429': _response_for_429,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _update_details_mapped_args(
        self,
        full_name: str,
        job_title: str,
        personal_email: str,
        employment_id: str,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        administrative_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        billing_address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_id: typing.Optional[str] = None,
        contract_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        country: typing.Optional[Country] = None,
        emergency_contact_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        manager_id: typing.Optional[str] = None,
        personal_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        pricing_plan_details: typing.Optional[PricingPlanDetails] = None,
        provisional_start_date: typing.Optional[date] = None,
        seniority_date: typing.Optional[datetime] = None,
        basic_information: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        department_id: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if address_details is not None:
            _body["address_details"] = address_details
        if administrative_details is not None:
            _body["administrative_details"] = administrative_details
        if bank_account_details is not None:
            _body["bank_account_details"] = bank_account_details
        if billing_address_details is not None:
            _body["billing_address_details"] = billing_address_details
        if company_id is not None:
            _body["company_id"] = company_id
        if contract_details is not None:
            _body["contract_details"] = contract_details
        if country is not None:
            _body["country"] = country
        if emergency_contact_details is not None:
            _body["emergency_contact_details"] = emergency_contact_details
        if full_name is not None:
            _body["full_name"] = full_name
        if job_title is not None:
            _body["job_title"] = job_title
        if manager_id is not None:
            _body["manager_id"] = manager_id
        if personal_details is not None:
            _body["personal_details"] = personal_details
        if personal_email is not None:
            _body["personal_email"] = personal_email
        if pricing_plan_details is not None:
            _body["pricing_plan_details"] = pricing_plan_details
        if provisional_start_date is not None:
            _body["provisional_start_date"] = provisional_start_date
        if seniority_date is not None:
            _body["seniority_date"] = seniority_date
        if basic_information is not None:
            _body["basic_information"] = basic_information
        if department_id is not None:
            _body["department_id"] = department_id
        args.body = _body
        if employment_id is not None:
            _path_params["employment_id"] = employment_id
        args.path = _path_params
        return args

    async def _aupdate_details_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Update employment
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_employment_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/employments/{employment_id}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_employment_full_params.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_details_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Update employment
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_employment_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/employments/{employment_id}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_employment_full_params.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateDetailsRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate_details(
        self,
        full_name: str,
        job_title: str,
        personal_email: str,
        employment_id: str,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        administrative_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        billing_address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_id: typing.Optional[str] = None,
        contract_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        country: typing.Optional[Country] = None,
        emergency_contact_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        manager_id: typing.Optional[str] = None,
        personal_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        pricing_plan_details: typing.Optional[PricingPlanDetails] = None,
        provisional_start_date: typing.Optional[date] = None,
        seniority_date: typing.Optional[datetime] = None,
        basic_information: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        department_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_details_mapped_args(
            full_name=full_name,
            job_title=job_title,
            personal_email=personal_email,
            employment_id=employment_id,
            address_details=address_details,
            administrative_details=administrative_details,
            bank_account_details=bank_account_details,
            billing_address_details=billing_address_details,
            company_id=company_id,
            contract_details=contract_details,
            country=country,
            emergency_contact_details=emergency_contact_details,
            manager_id=manager_id,
            personal_details=personal_details,
            pricing_plan_details=pricing_plan_details,
            provisional_start_date=provisional_start_date,
            seniority_date=seniority_date,
            basic_information=basic_information,
            department_id=department_id,
        )
        return await self._aupdate_details_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def update_details(
        self,
        full_name: str,
        job_title: str,
        personal_email: str,
        employment_id: str,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        administrative_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        billing_address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_id: typing.Optional[str] = None,
        contract_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        country: typing.Optional[Country] = None,
        emergency_contact_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        manager_id: typing.Optional[str] = None,
        personal_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        pricing_plan_details: typing.Optional[PricingPlanDetails] = None,
        provisional_start_date: typing.Optional[date] = None,
        seniority_date: typing.Optional[datetime] = None,
        basic_information: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        department_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_details_mapped_args(
            full_name=full_name,
            job_title=job_title,
            personal_email=personal_email,
            employment_id=employment_id,
            address_details=address_details,
            administrative_details=administrative_details,
            bank_account_details=bank_account_details,
            billing_address_details=billing_address_details,
            company_id=company_id,
            contract_details=contract_details,
            country=country,
            emergency_contact_details=emergency_contact_details,
            manager_id=manager_id,
            personal_details=personal_details,
            pricing_plan_details=pricing_plan_details,
            provisional_start_date=provisional_start_date,
            seniority_date=seniority_date,
            basic_information=basic_information,
            department_id=department_id,
        )
        return self._update_details_oapg(
            body=args.body,
            path_params=args.path,
        )

class UpdateDetails(BaseApi):

    async def aupdate_details(
        self,
        full_name: str,
        job_title: str,
        personal_email: str,
        employment_id: str,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        administrative_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        billing_address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_id: typing.Optional[str] = None,
        contract_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        country: typing.Optional[Country] = None,
        emergency_contact_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        manager_id: typing.Optional[str] = None,
        personal_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        pricing_plan_details: typing.Optional[PricingPlanDetails] = None,
        provisional_start_date: typing.Optional[date] = None,
        seniority_date: typing.Optional[datetime] = None,
        basic_information: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        department_id: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> EmploymentResponsePydantic:
        raw_response = await self.raw.aupdate_details(
            full_name=full_name,
            job_title=job_title,
            personal_email=personal_email,
            employment_id=employment_id,
            address_details=address_details,
            administrative_details=administrative_details,
            bank_account_details=bank_account_details,
            billing_address_details=billing_address_details,
            company_id=company_id,
            contract_details=contract_details,
            country=country,
            emergency_contact_details=emergency_contact_details,
            manager_id=manager_id,
            personal_details=personal_details,
            pricing_plan_details=pricing_plan_details,
            provisional_start_date=provisional_start_date,
            seniority_date=seniority_date,
            basic_information=basic_information,
            department_id=department_id,
            **kwargs,
        )
        if validate:
            return EmploymentResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(EmploymentResponsePydantic, raw_response.body)
    
    
    def update_details(
        self,
        full_name: str,
        job_title: str,
        personal_email: str,
        employment_id: str,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        administrative_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        billing_address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_id: typing.Optional[str] = None,
        contract_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        country: typing.Optional[Country] = None,
        emergency_contact_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        manager_id: typing.Optional[str] = None,
        personal_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        pricing_plan_details: typing.Optional[PricingPlanDetails] = None,
        provisional_start_date: typing.Optional[date] = None,
        seniority_date: typing.Optional[datetime] = None,
        basic_information: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        department_id: typing.Optional[str] = None,
        validate: bool = False,
    ) -> EmploymentResponsePydantic:
        raw_response = self.raw.update_details(
            full_name=full_name,
            job_title=job_title,
            personal_email=personal_email,
            employment_id=employment_id,
            address_details=address_details,
            administrative_details=administrative_details,
            bank_account_details=bank_account_details,
            billing_address_details=billing_address_details,
            company_id=company_id,
            contract_details=contract_details,
            country=country,
            emergency_contact_details=emergency_contact_details,
            manager_id=manager_id,
            personal_details=personal_details,
            pricing_plan_details=pricing_plan_details,
            provisional_start_date=provisional_start_date,
            seniority_date=seniority_date,
            basic_information=basic_information,
            department_id=department_id,
        )
        if validate:
            return EmploymentResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(EmploymentResponsePydantic, raw_response.body)


class ApiForput(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aput(
        self,
        full_name: str,
        job_title: str,
        personal_email: str,
        employment_id: str,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        administrative_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        billing_address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_id: typing.Optional[str] = None,
        contract_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        country: typing.Optional[Country] = None,
        emergency_contact_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        manager_id: typing.Optional[str] = None,
        personal_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        pricing_plan_details: typing.Optional[PricingPlanDetails] = None,
        provisional_start_date: typing.Optional[date] = None,
        seniority_date: typing.Optional[datetime] = None,
        basic_information: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        department_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_details_mapped_args(
            full_name=full_name,
            job_title=job_title,
            personal_email=personal_email,
            employment_id=employment_id,
            address_details=address_details,
            administrative_details=administrative_details,
            bank_account_details=bank_account_details,
            billing_address_details=billing_address_details,
            company_id=company_id,
            contract_details=contract_details,
            country=country,
            emergency_contact_details=emergency_contact_details,
            manager_id=manager_id,
            personal_details=personal_details,
            pricing_plan_details=pricing_plan_details,
            provisional_start_date=provisional_start_date,
            seniority_date=seniority_date,
            basic_information=basic_information,
            department_id=department_id,
        )
        return await self._aupdate_details_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def put(
        self,
        full_name: str,
        job_title: str,
        personal_email: str,
        employment_id: str,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        administrative_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        billing_address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_id: typing.Optional[str] = None,
        contract_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        country: typing.Optional[Country] = None,
        emergency_contact_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        manager_id: typing.Optional[str] = None,
        personal_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        pricing_plan_details: typing.Optional[PricingPlanDetails] = None,
        provisional_start_date: typing.Optional[date] = None,
        seniority_date: typing.Optional[datetime] = None,
        basic_information: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        department_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_details_mapped_args(
            full_name=full_name,
            job_title=job_title,
            personal_email=personal_email,
            employment_id=employment_id,
            address_details=address_details,
            administrative_details=administrative_details,
            bank_account_details=bank_account_details,
            billing_address_details=billing_address_details,
            company_id=company_id,
            contract_details=contract_details,
            country=country,
            emergency_contact_details=emergency_contact_details,
            manager_id=manager_id,
            personal_details=personal_details,
            pricing_plan_details=pricing_plan_details,
            provisional_start_date=provisional_start_date,
            seniority_date=seniority_date,
            basic_information=basic_information,
            department_id=department_id,
        )
        return self._update_details_oapg(
            body=args.body,
            path_params=args.path,
        )


# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from remote_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from remote_python_sdk.api_response import AsyncGeneratorResponse
from remote_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401

from remote_python_sdk.model.create_company_params import CreateCompanyParams as CreateCompanyParamsSchema
from remote_python_sdk.model.forbidden_response import ForbiddenResponse as ForbiddenResponseSchema
from remote_python_sdk.model.unprocessable_entity_response import UnprocessableEntityResponse as UnprocessableEntityResponseSchema
from remote_python_sdk.model.too_many_requests_response import TooManyRequestsResponse as TooManyRequestsResponseSchema
from remote_python_sdk.model.company_creation_response import CompanyCreationResponse as CompanyCreationResponseSchema
from remote_python_sdk.model.bad_request_response import BadRequestResponse as BadRequestResponseSchema
from remote_python_sdk.model.company_creation_conflict_error_response import CompanyCreationConflictErrorResponse as CompanyCreationConflictErrorResponseSchema

from remote_python_sdk.type.company_creation_conflict_error_response import CompanyCreationConflictErrorResponse
from remote_python_sdk.type.too_many_requests_response import TooManyRequestsResponse
from remote_python_sdk.type.bad_request_response import BadRequestResponse
from remote_python_sdk.type.unprocessable_entity_response import UnprocessableEntityResponse
from remote_python_sdk.type.forbidden_response import ForbiddenResponse
from remote_python_sdk.type.company_creation_response import CompanyCreationResponse
from remote_python_sdk.type.create_company_params import CreateCompanyParams

from ...api_client import Dictionary
from remote_python_sdk.pydantic.forbidden_response import ForbiddenResponse as ForbiddenResponsePydantic
from remote_python_sdk.pydantic.too_many_requests_response import TooManyRequestsResponse as TooManyRequestsResponsePydantic
from remote_python_sdk.pydantic.create_company_params import CreateCompanyParams as CreateCompanyParamsPydantic
from remote_python_sdk.pydantic.unprocessable_entity_response import UnprocessableEntityResponse as UnprocessableEntityResponsePydantic
from remote_python_sdk.pydantic.bad_request_response import BadRequestResponse as BadRequestResponsePydantic
from remote_python_sdk.pydantic.company_creation_conflict_error_response import CompanyCreationConflictErrorResponse as CompanyCreationConflictErrorResponsePydantic
from remote_python_sdk.pydantic.company_creation_response import CompanyCreationResponse as CompanyCreationResponsePydantic

from . import path

# Query params
ActionSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'action': typing.Union[ActionSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_action = api_client.QueryParameter(
    name="action",
    style=api_client.ParameterStyle.FORM,
    schema=ActionSchema,
    explode=True,
)
# body param
SchemaForRequestBodyApplicationJson = CreateCompanyParamsSchema


request_body_create_company_params = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
_auth = [
    'OAuth2',
    'OAuth2',
]
SchemaFor201ResponseBodyApplicationJson = CompanyCreationResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: CompanyCreationResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: CompanyCreationResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = BadRequestResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: BadRequestResponse


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: BadRequestResponse


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor403ResponseBodyApplicationJson = ForbiddenResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: ForbiddenResponse


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: ForbiddenResponse


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
    },
)
SchemaFor409ResponseBodyApplicationJson = CompanyCreationConflictErrorResponseSchema


@dataclass
class ApiResponseFor409(api_client.ApiResponse):
    body: CompanyCreationConflictErrorResponse


@dataclass
class ApiResponseFor409Async(api_client.AsyncApiResponse):
    body: CompanyCreationConflictErrorResponse


_response_for_409 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor409,
    response_cls_async=ApiResponseFor409Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor409ResponseBodyApplicationJson),
    },
)
SchemaFor422ResponseBodyApplicationJson = UnprocessableEntityResponseSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: UnprocessableEntityResponse


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: UnprocessableEntityResponse


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
SchemaFor429ResponseBodyApplicationJson = TooManyRequestsResponseSchema


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    body: TooManyRequestsResponse


@dataclass
class ApiResponseFor429Async(api_client.AsyncApiResponse):
    body: TooManyRequestsResponse


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
    response_cls_async=ApiResponseFor429Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor429ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '201': _response_for_201,
    '400': _response_for_400,
    '403': _response_for_403,
    '409': _response_for_409,
    '422': _response_for_422,
    '429': _response_for_429,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _create_new_company_mapped_args(
        self,
        company_owner_email: str,
        company_owner_name: str,
        country_code: str,
        desired_currency: str,
        name: str,
        terms_of_service_accepted_at: datetime,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        email_domain: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        phone_number: typing.Optional[str] = None,
        registration_number: typing.Optional[str] = None,
        tax_number: typing.Optional[str] = None,
        action: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _body = {}
        if address_details is not None:
            _body["address_details"] = address_details
        if bank_account_details is not None:
            _body["bank_account_details"] = bank_account_details
        if company_owner_email is not None:
            _body["company_owner_email"] = company_owner_email
        if company_owner_name is not None:
            _body["company_owner_name"] = company_owner_name
        if country_code is not None:
            _body["country_code"] = country_code
        if desired_currency is not None:
            _body["desired_currency"] = desired_currency
        if email_domain is not None:
            _body["email_domain"] = email_domain
        if external_id is not None:
            _body["external_id"] = external_id
        if name is not None:
            _body["name"] = name
        if phone_number is not None:
            _body["phone_number"] = phone_number
        if registration_number is not None:
            _body["registration_number"] = registration_number
        if tax_number is not None:
            _body["tax_number"] = tax_number
        if terms_of_service_accepted_at is not None:
            _body["terms_of_service_accepted_at"] = terms_of_service_accepted_at
        args.body = _body
        if action is not None:
            _query_params["action"] = action
        args.query = _query_params
        return args

    async def _acreate_new_company_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create a company
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_action,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/companies',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_create_company_params.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_new_company_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create a company
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_action,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/companies',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_create_company_params.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateNewCompanyRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_new_company(
        self,
        company_owner_email: str,
        company_owner_name: str,
        country_code: str,
        desired_currency: str,
        name: str,
        terms_of_service_accepted_at: datetime,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        email_domain: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        phone_number: typing.Optional[str] = None,
        registration_number: typing.Optional[str] = None,
        tax_number: typing.Optional[str] = None,
        action: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_company_mapped_args(
            company_owner_email=company_owner_email,
            company_owner_name=company_owner_name,
            country_code=country_code,
            desired_currency=desired_currency,
            name=name,
            terms_of_service_accepted_at=terms_of_service_accepted_at,
            address_details=address_details,
            bank_account_details=bank_account_details,
            email_domain=email_domain,
            external_id=external_id,
            phone_number=phone_number,
            registration_number=registration_number,
            tax_number=tax_number,
            action=action,
        )
        return await self._acreate_new_company_oapg(
            body=args.body,
            query_params=args.query,
            **kwargs,
        )
    
    def create_new_company(
        self,
        company_owner_email: str,
        company_owner_name: str,
        country_code: str,
        desired_currency: str,
        name: str,
        terms_of_service_accepted_at: datetime,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        email_domain: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        phone_number: typing.Optional[str] = None,
        registration_number: typing.Optional[str] = None,
        tax_number: typing.Optional[str] = None,
        action: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_company_mapped_args(
            company_owner_email=company_owner_email,
            company_owner_name=company_owner_name,
            country_code=country_code,
            desired_currency=desired_currency,
            name=name,
            terms_of_service_accepted_at=terms_of_service_accepted_at,
            address_details=address_details,
            bank_account_details=bank_account_details,
            email_domain=email_domain,
            external_id=external_id,
            phone_number=phone_number,
            registration_number=registration_number,
            tax_number=tax_number,
            action=action,
        )
        return self._create_new_company_oapg(
            body=args.body,
            query_params=args.query,
        )

class CreateNewCompany(BaseApi):

    async def acreate_new_company(
        self,
        company_owner_email: str,
        company_owner_name: str,
        country_code: str,
        desired_currency: str,
        name: str,
        terms_of_service_accepted_at: datetime,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        email_domain: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        phone_number: typing.Optional[str] = None,
        registration_number: typing.Optional[str] = None,
        tax_number: typing.Optional[str] = None,
        action: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> CompanyCreationResponsePydantic:
        raw_response = await self.raw.acreate_new_company(
            company_owner_email=company_owner_email,
            company_owner_name=company_owner_name,
            country_code=country_code,
            desired_currency=desired_currency,
            name=name,
            terms_of_service_accepted_at=terms_of_service_accepted_at,
            address_details=address_details,
            bank_account_details=bank_account_details,
            email_domain=email_domain,
            external_id=external_id,
            phone_number=phone_number,
            registration_number=registration_number,
            tax_number=tax_number,
            action=action,
            **kwargs,
        )
        if validate:
            return CompanyCreationResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(CompanyCreationResponsePydantic, raw_response.body)
    
    
    def create_new_company(
        self,
        company_owner_email: str,
        company_owner_name: str,
        country_code: str,
        desired_currency: str,
        name: str,
        terms_of_service_accepted_at: datetime,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        email_domain: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        phone_number: typing.Optional[str] = None,
        registration_number: typing.Optional[str] = None,
        tax_number: typing.Optional[str] = None,
        action: typing.Optional[str] = None,
        validate: bool = False,
    ) -> CompanyCreationResponsePydantic:
        raw_response = self.raw.create_new_company(
            company_owner_email=company_owner_email,
            company_owner_name=company_owner_name,
            country_code=country_code,
            desired_currency=desired_currency,
            name=name,
            terms_of_service_accepted_at=terms_of_service_accepted_at,
            address_details=address_details,
            bank_account_details=bank_account_details,
            email_domain=email_domain,
            external_id=external_id,
            phone_number=phone_number,
            registration_number=registration_number,
            tax_number=tax_number,
            action=action,
        )
        if validate:
            return CompanyCreationResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(CompanyCreationResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        company_owner_email: str,
        company_owner_name: str,
        country_code: str,
        desired_currency: str,
        name: str,
        terms_of_service_accepted_at: datetime,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        email_domain: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        phone_number: typing.Optional[str] = None,
        registration_number: typing.Optional[str] = None,
        tax_number: typing.Optional[str] = None,
        action: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_company_mapped_args(
            company_owner_email=company_owner_email,
            company_owner_name=company_owner_name,
            country_code=country_code,
            desired_currency=desired_currency,
            name=name,
            terms_of_service_accepted_at=terms_of_service_accepted_at,
            address_details=address_details,
            bank_account_details=bank_account_details,
            email_domain=email_domain,
            external_id=external_id,
            phone_number=phone_number,
            registration_number=registration_number,
            tax_number=tax_number,
            action=action,
        )
        return await self._acreate_new_company_oapg(
            body=args.body,
            query_params=args.query,
            **kwargs,
        )
    
    def post(
        self,
        company_owner_email: str,
        company_owner_name: str,
        country_code: str,
        desired_currency: str,
        name: str,
        terms_of_service_accepted_at: datetime,
        address_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        bank_account_details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        email_domain: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        phone_number: typing.Optional[str] = None,
        registration_number: typing.Optional[str] = None,
        tax_number: typing.Optional[str] = None,
        action: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_company_mapped_args(
            company_owner_email=company_owner_email,
            company_owner_name=company_owner_name,
            country_code=country_code,
            desired_currency=desired_currency,
            name=name,
            terms_of_service_accepted_at=terms_of_service_accepted_at,
            address_details=address_details,
            bank_account_details=bank_account_details,
            email_domain=email_domain,
            external_id=external_id,
            phone_number=phone_number,
            registration_number=registration_number,
            tax_number=tax_number,
            action=action,
        )
        return self._create_new_company_oapg(
            body=args.body,
            query_params=args.query,
        )


# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class TerminationOffboardingRiskAssessmentReasons(
    schemas.ListSchema
):
    """NOTE:
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "caring_responsibilities": "CARING_RESPONSIBILITIES",
                    "disabled_or_health_condition": "DISABLED_OR_HEALTH_CONDITION",
                    "family_leave": "FAMILY_LEAVE",
                    "member_of_union_or_works_council": "MEMBER_OF_UNION_OR_WORKS_COUNCIL",
                    "none_of_these": "NONE_OF_THESE",
                    "pregnant_or_breastfeeding": "PREGNANT_OR_BREASTFEEDING",
                    "reported_concerns_with_workplace": "REPORTED_CONCERNS_WITH_WORKPLACE",
                    "requested_medical_or_family_leave": "REQUESTED_MEDICAL_OR_FAMILY_LEAVE",
                    "sick_leave": "SICK_LEAVE",
                }
            
            @schemas.classproperty
            def CARING_RESPONSIBILITIES(cls):
                return cls("caring_responsibilities")
            
            @schemas.classproperty
            def DISABLED_OR_HEALTH_CONDITION(cls):
                return cls("disabled_or_health_condition")
            
            @schemas.classproperty
            def FAMILY_LEAVE(cls):
                return cls("family_leave")
            
            @schemas.classproperty
            def MEMBER_OF_UNION_OR_WORKS_COUNCIL(cls):
                return cls("member_of_union_or_works_council")
            
            @schemas.classproperty
            def NONE_OF_THESE(cls):
                return cls("none_of_these")
            
            @schemas.classproperty
            def PREGNANT_OR_BREASTFEEDING(cls):
                return cls("pregnant_or_breastfeeding")
            
            @schemas.classproperty
            def REPORTED_CONCERNS_WITH_WORKPLACE(cls):
                return cls("reported_concerns_with_workplace")
            
            @schemas.classproperty
            def REQUESTED_MEDICAL_OR_FAMILY_LEAVE(cls):
                return cls("requested_medical_or_family_leave")
            
            @schemas.classproperty
            def SICK_LEAVE(cls):
                return cls("sick_leave")

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TerminationOffboardingRiskAssessmentReasons':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)

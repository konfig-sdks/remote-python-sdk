# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class ResignationAfterStartDateRequestParams(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "has_more_salary_info",
            "agrees_to_pto_amount",
            "agrees_to_resignation_reason",
            "accepts_proposed_notice",
            "will_take_more_pto",
            "is_owed_outstanding_reimbursements",
            "has_additional_information",
        }
        
        class properties:
            accepts_proposed_notice = schemas.BoolSchema
            agrees_to_pto_amount = schemas.BoolSchema
            agrees_to_resignation_reason = schemas.BoolSchema
            has_additional_information = schemas.BoolSchema
            has_more_salary_info = schemas.BoolSchema
            is_owed_outstanding_reimbursements = schemas.BoolSchema
            will_take_more_pto = schemas.BoolSchema
            agrees_to_pto_amount_notes = schemas.StrSchema
            agrees_to_resignation_reason_notes = schemas.StrSchema
            has_additional_information_notes = schemas.StrSchema
            has_more_salary_info_notes = schemas.StrSchema
        
            @staticmethod
            def owed_outstanding_reimbursements() -> typing.Type['ResignationAfterStartDateRequestParamsOwedOutstandingReimbursements']:
                return ResignationAfterStartDateRequestParamsOwedOutstandingReimbursements
        
            @staticmethod
            def proposed_last_date() -> typing.Type['ResignationAfterStartDateRequestParamsProposedLastDate']:
                return ResignationAfterStartDateRequestParamsProposedLastDate
            will_take_more_pto_notes = schemas.StrSchema
            __annotations__ = {
                "accepts_proposed_notice": accepts_proposed_notice,
                "agrees_to_pto_amount": agrees_to_pto_amount,
                "agrees_to_resignation_reason": agrees_to_resignation_reason,
                "has_additional_information": has_additional_information,
                "has_more_salary_info": has_more_salary_info,
                "is_owed_outstanding_reimbursements": is_owed_outstanding_reimbursements,
                "will_take_more_pto": will_take_more_pto,
                "agrees_to_pto_amount_notes": agrees_to_pto_amount_notes,
                "agrees_to_resignation_reason_notes": agrees_to_resignation_reason_notes,
                "has_additional_information_notes": has_additional_information_notes,
                "has_more_salary_info_notes": has_more_salary_info_notes,
                "owed_outstanding_reimbursements": owed_outstanding_reimbursements,
                "proposed_last_date": proposed_last_date,
                "will_take_more_pto_notes": will_take_more_pto_notes,
            }
    
    has_more_salary_info: MetaOapg.properties.has_more_salary_info
    agrees_to_pto_amount: MetaOapg.properties.agrees_to_pto_amount
    agrees_to_resignation_reason: MetaOapg.properties.agrees_to_resignation_reason
    accepts_proposed_notice: MetaOapg.properties.accepts_proposed_notice
    will_take_more_pto: MetaOapg.properties.will_take_more_pto
    is_owed_outstanding_reimbursements: MetaOapg.properties.is_owed_outstanding_reimbursements
    has_additional_information: MetaOapg.properties.has_additional_information
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accepts_proposed_notice"]) -> MetaOapg.properties.accepts_proposed_notice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["agrees_to_pto_amount"]) -> MetaOapg.properties.agrees_to_pto_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["agrees_to_resignation_reason"]) -> MetaOapg.properties.agrees_to_resignation_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_additional_information"]) -> MetaOapg.properties.has_additional_information: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_more_salary_info"]) -> MetaOapg.properties.has_more_salary_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_owed_outstanding_reimbursements"]) -> MetaOapg.properties.is_owed_outstanding_reimbursements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["will_take_more_pto"]) -> MetaOapg.properties.will_take_more_pto: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["agrees_to_pto_amount_notes"]) -> MetaOapg.properties.agrees_to_pto_amount_notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["agrees_to_resignation_reason_notes"]) -> MetaOapg.properties.agrees_to_resignation_reason_notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_additional_information_notes"]) -> MetaOapg.properties.has_additional_information_notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_more_salary_info_notes"]) -> MetaOapg.properties.has_more_salary_info_notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owed_outstanding_reimbursements"]) -> 'ResignationAfterStartDateRequestParamsOwedOutstandingReimbursements': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposed_last_date"]) -> 'ResignationAfterStartDateRequestParamsProposedLastDate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["will_take_more_pto_notes"]) -> MetaOapg.properties.will_take_more_pto_notes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accepts_proposed_notice", "agrees_to_pto_amount", "agrees_to_resignation_reason", "has_additional_information", "has_more_salary_info", "is_owed_outstanding_reimbursements", "will_take_more_pto", "agrees_to_pto_amount_notes", "agrees_to_resignation_reason_notes", "has_additional_information_notes", "has_more_salary_info_notes", "owed_outstanding_reimbursements", "proposed_last_date", "will_take_more_pto_notes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accepts_proposed_notice"]) -> MetaOapg.properties.accepts_proposed_notice: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["agrees_to_pto_amount"]) -> MetaOapg.properties.agrees_to_pto_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["agrees_to_resignation_reason"]) -> MetaOapg.properties.agrees_to_resignation_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_additional_information"]) -> MetaOapg.properties.has_additional_information: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_more_salary_info"]) -> MetaOapg.properties.has_more_salary_info: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_owed_outstanding_reimbursements"]) -> MetaOapg.properties.is_owed_outstanding_reimbursements: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["will_take_more_pto"]) -> MetaOapg.properties.will_take_more_pto: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["agrees_to_pto_amount_notes"]) -> typing.Union[MetaOapg.properties.agrees_to_pto_amount_notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["agrees_to_resignation_reason_notes"]) -> typing.Union[MetaOapg.properties.agrees_to_resignation_reason_notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_additional_information_notes"]) -> typing.Union[MetaOapg.properties.has_additional_information_notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_more_salary_info_notes"]) -> typing.Union[MetaOapg.properties.has_more_salary_info_notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owed_outstanding_reimbursements"]) -> typing.Union['ResignationAfterStartDateRequestParamsOwedOutstandingReimbursements', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposed_last_date"]) -> typing.Union['ResignationAfterStartDateRequestParamsProposedLastDate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["will_take_more_pto_notes"]) -> typing.Union[MetaOapg.properties.will_take_more_pto_notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accepts_proposed_notice", "agrees_to_pto_amount", "agrees_to_resignation_reason", "has_additional_information", "has_more_salary_info", "is_owed_outstanding_reimbursements", "will_take_more_pto", "agrees_to_pto_amount_notes", "agrees_to_resignation_reason_notes", "has_additional_information_notes", "has_more_salary_info_notes", "owed_outstanding_reimbursements", "proposed_last_date", "will_take_more_pto_notes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        has_more_salary_info: typing.Union[MetaOapg.properties.has_more_salary_info, bool, ],
        agrees_to_pto_amount: typing.Union[MetaOapg.properties.agrees_to_pto_amount, bool, ],
        agrees_to_resignation_reason: typing.Union[MetaOapg.properties.agrees_to_resignation_reason, bool, ],
        accepts_proposed_notice: typing.Union[MetaOapg.properties.accepts_proposed_notice, bool, ],
        will_take_more_pto: typing.Union[MetaOapg.properties.will_take_more_pto, bool, ],
        is_owed_outstanding_reimbursements: typing.Union[MetaOapg.properties.is_owed_outstanding_reimbursements, bool, ],
        has_additional_information: typing.Union[MetaOapg.properties.has_additional_information, bool, ],
        agrees_to_pto_amount_notes: typing.Union[MetaOapg.properties.agrees_to_pto_amount_notes, str, schemas.Unset] = schemas.unset,
        agrees_to_resignation_reason_notes: typing.Union[MetaOapg.properties.agrees_to_resignation_reason_notes, str, schemas.Unset] = schemas.unset,
        has_additional_information_notes: typing.Union[MetaOapg.properties.has_additional_information_notes, str, schemas.Unset] = schemas.unset,
        has_more_salary_info_notes: typing.Union[MetaOapg.properties.has_more_salary_info_notes, str, schemas.Unset] = schemas.unset,
        owed_outstanding_reimbursements: typing.Union['ResignationAfterStartDateRequestParamsOwedOutstandingReimbursements', schemas.Unset] = schemas.unset,
        proposed_last_date: typing.Union['ResignationAfterStartDateRequestParamsProposedLastDate', schemas.Unset] = schemas.unset,
        will_take_more_pto_notes: typing.Union[MetaOapg.properties.will_take_more_pto_notes, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ResignationAfterStartDateRequestParams':
        return super().__new__(
            cls,
            *args,
            has_more_salary_info=has_more_salary_info,
            agrees_to_pto_amount=agrees_to_pto_amount,
            agrees_to_resignation_reason=agrees_to_resignation_reason,
            accepts_proposed_notice=accepts_proposed_notice,
            will_take_more_pto=will_take_more_pto,
            is_owed_outstanding_reimbursements=is_owed_outstanding_reimbursements,
            has_additional_information=has_additional_information,
            agrees_to_pto_amount_notes=agrees_to_pto_amount_notes,
            agrees_to_resignation_reason_notes=agrees_to_resignation_reason_notes,
            has_additional_information_notes=has_additional_information_notes,
            has_more_salary_info_notes=has_more_salary_info_notes,
            owed_outstanding_reimbursements=owed_outstanding_reimbursements,
            proposed_last_date=proposed_last_date,
            will_take_more_pto_notes=will_take_more_pto_notes,
            _configuration=_configuration,
            **kwargs,
        )

from remote_python_sdk.model.resignation_after_start_date_request_params_owed_outstanding_reimbursements import ResignationAfterStartDateRequestParamsOwedOutstandingReimbursements
from remote_python_sdk.model.resignation_after_start_date_request_params_proposed_last_date import ResignationAfterStartDateRequestParamsProposedLastDate

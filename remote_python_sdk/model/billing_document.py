# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class BillingDocument(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information of a billing document
    """


    class MetaOapg:
        required = {
            "total",
            "company_id",
            "issued_date",
            "billing_document_type",
            "billing_document_period",
            "id",
            "billing_document_currency",
            "items",
        }
        
        class properties:
            billing_document_currency = schemas.StrSchema
            billing_document_period = schemas.StrSchema
            
            
            class billing_document_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "reconciliation_invoice": "RECONCILIATION_INVOICE",
                        "prefunding_invoice": "PREFUNDING_INVOICE",
                        "supplemental_service_invoice": "SUPPLEMENTAL_SERVICE_INVOICE",
                        "reconciliation_credit_note": "RECONCILIATION_CREDIT_NOTE",
                    }
                
                @schemas.classproperty
                def RECONCILIATION_INVOICE(cls):
                    return cls("reconciliation_invoice")
                
                @schemas.classproperty
                def PREFUNDING_INVOICE(cls):
                    return cls("prefunding_invoice")
                
                @schemas.classproperty
                def SUPPLEMENTAL_SERVICE_INVOICE(cls):
                    return cls("supplemental_service_invoice")
                
                @schemas.classproperty
                def RECONCILIATION_CREDIT_NOTE(cls):
                    return cls("reconciliation_credit_note")
            company_id = schemas.StrSchema
            id = schemas.StrSchema
            issued_date = schemas.StrSchema
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BillingDocumentAmountItem']:
                        return BillingDocumentAmountItem
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BillingDocumentAmountItem'], typing.List['BillingDocumentAmountItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BillingDocumentAmountItem':
                    return super().__getitem__(i)
            total = schemas.IntSchema
            __annotations__ = {
                "billing_document_currency": billing_document_currency,
                "billing_document_period": billing_document_period,
                "billing_document_type": billing_document_type,
                "company_id": company_id,
                "id": id,
                "issued_date": issued_date,
                "items": items,
                "total": total,
            }
    
    total: MetaOapg.properties.total
    company_id: MetaOapg.properties.company_id
    issued_date: MetaOapg.properties.issued_date
    billing_document_type: MetaOapg.properties.billing_document_type
    billing_document_period: MetaOapg.properties.billing_document_period
    id: MetaOapg.properties.id
    billing_document_currency: MetaOapg.properties.billing_document_currency
    items: MetaOapg.properties.items
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_document_currency"]) -> MetaOapg.properties.billing_document_currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_document_period"]) -> MetaOapg.properties.billing_document_period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_document_type"]) -> MetaOapg.properties.billing_document_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issued_date"]) -> MetaOapg.properties.issued_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["billing_document_currency", "billing_document_period", "billing_document_type", "company_id", "id", "issued_date", "items", "total", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_document_currency"]) -> MetaOapg.properties.billing_document_currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_document_period"]) -> MetaOapg.properties.billing_document_period: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_document_type"]) -> MetaOapg.properties.billing_document_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_id"]) -> MetaOapg.properties.company_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issued_date"]) -> MetaOapg.properties.issued_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["billing_document_currency", "billing_document_period", "billing_document_type", "company_id", "id", "issued_date", "items", "total", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, ],
        company_id: typing.Union[MetaOapg.properties.company_id, str, ],
        issued_date: typing.Union[MetaOapg.properties.issued_date, str, ],
        billing_document_type: typing.Union[MetaOapg.properties.billing_document_type, str, ],
        billing_document_period: typing.Union[MetaOapg.properties.billing_document_period, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        billing_document_currency: typing.Union[MetaOapg.properties.billing_document_currency, str, ],
        items: typing.Union[MetaOapg.properties.items, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BillingDocument':
        return super().__new__(
            cls,
            *args,
            total=total,
            company_id=company_id,
            issued_date=issued_date,
            billing_document_type=billing_document_type,
            billing_document_period=billing_document_period,
            id=id,
            billing_document_currency=billing_document_currency,
            items=items,
            _configuration=_configuration,
            **kwargs,
        )

from remote_python_sdk.model.billing_document_amount_item import BillingDocumentAmountItem

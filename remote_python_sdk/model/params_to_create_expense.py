# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class ParamsToCreateExpense(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

      All the params needed to create an expense.

  An expense can be created using the `receipt` or `receipts` fields; however, these fields are not allowed together within the same object."

    """


    class MetaOapg:
        required = {
            "employment_id",
            "amount",
            "expense_date",
            "currency",
            "title",
        }
        
        class properties:
            title = schemas.StrSchema
            amount = schemas.IntSchema
            currency = schemas.StrSchema
            employment_id = schemas.StrSchema
            expense_date = schemas.StrSchema
            
            
            class category(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "education_training": "EDUCATION_TRAINING",
                        "home_office": "HOME_OFFICE",
                        "meals": "MEALS",
                        "other": "OTHER",
                        "phone_utilities": "PHONE_UTILITIES",
                        "tech_equipment": "TECH_EQUIPMENT",
                        "travel": "TRAVEL",
                        "coworking": "COWORKING",
                    }
                
                @schemas.classproperty
                def EDUCATION_TRAINING(cls):
                    return cls("education_training")
                
                @schemas.classproperty
                def HOME_OFFICE(cls):
                    return cls("home_office")
                
                @schemas.classproperty
                def MEALS(cls):
                    return cls("meals")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
                
                @schemas.classproperty
                def PHONE_UTILITIES(cls):
                    return cls("phone_utilities")
                
                @schemas.classproperty
                def TECH_EQUIPMENT(cls):
                    return cls("tech_equipment")
                
                @schemas.classproperty
                def TRAVEL(cls):
                    return cls("travel")
                
                @schemas.classproperty
                def COWORKING(cls):
                    return cls("coworking")
        
            @staticmethod
            def receipt() -> typing.Type['Base64File']:
                return Base64File
            
            
            class receipts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 5
                    
                    @staticmethod
                    def items() -> typing.Type['Base64File']:
                        return Base64File
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Base64File'], typing.List['Base64File']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'receipts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Base64File':
                    return super().__getitem__(i)
            reviewed_at = schemas.DateSchema
            reviewer_id = schemas.StrSchema
            tax_amount = schemas.IntSchema
            timezone = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "amount": amount,
                "currency": currency,
                "employment_id": employment_id,
                "expense_date": expense_date,
                "category": category,
                "receipt": receipt,
                "receipts": receipts,
                "reviewed_at": reviewed_at,
                "reviewer_id": reviewer_id,
                "tax_amount": tax_amount,
                "timezone": timezone,
            }
    
    employment_id: MetaOapg.properties.employment_id
    amount: MetaOapg.properties.amount
    expense_date: MetaOapg.properties.expense_date
    currency: MetaOapg.properties.currency
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment_id"]) -> MetaOapg.properties.employment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expense_date"]) -> MetaOapg.properties.expense_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receipt"]) -> 'Base64File': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receipts"]) -> MetaOapg.properties.receipts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewed_at"]) -> MetaOapg.properties.reviewed_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewer_id"]) -> MetaOapg.properties.reviewer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_amount"]) -> MetaOapg.properties.tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "amount", "currency", "employment_id", "expense_date", "category", "receipt", "receipts", "reviewed_at", "reviewer_id", "tax_amount", "timezone", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment_id"]) -> MetaOapg.properties.employment_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expense_date"]) -> MetaOapg.properties.expense_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receipt"]) -> typing.Union['Base64File', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receipts"]) -> typing.Union[MetaOapg.properties.receipts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewed_at"]) -> typing.Union[MetaOapg.properties.reviewed_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewer_id"]) -> typing.Union[MetaOapg.properties.reviewer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_amount"]) -> typing.Union[MetaOapg.properties.tax_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "amount", "currency", "employment_id", "expense_date", "category", "receipt", "receipts", "reviewed_at", "reviewer_id", "tax_amount", "timezone", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employment_id: typing.Union[MetaOapg.properties.employment_id, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
        expense_date: typing.Union[MetaOapg.properties.expense_date, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
        receipt: typing.Union['Base64File', schemas.Unset] = schemas.unset,
        receipts: typing.Union[MetaOapg.properties.receipts, list, tuple, schemas.Unset] = schemas.unset,
        reviewed_at: typing.Union[MetaOapg.properties.reviewed_at, str, date, schemas.Unset] = schemas.unset,
        reviewer_id: typing.Union[MetaOapg.properties.reviewer_id, str, schemas.Unset] = schemas.unset,
        tax_amount: typing.Union[MetaOapg.properties.tax_amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ParamsToCreateExpense':
        return super().__new__(
            cls,
            *args,
            employment_id=employment_id,
            amount=amount,
            expense_date=expense_date,
            currency=currency,
            title=title,
            category=category,
            receipt=receipt,
            receipts=receipts,
            reviewed_at=reviewed_at,
            reviewer_id=reviewer_id,
            tax_amount=tax_amount,
            timezone=timezone,
            _configuration=_configuration,
            **kwargs,
        )

from remote_python_sdk.model.base64_file import Base64File

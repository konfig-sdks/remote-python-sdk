# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class CostCalculatorCountryLevelRegion(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A supported country on Remote
    """


    class MetaOapg:
        required = {
            "original_country_slug",
            "code",
            "name",
            "region_slug",
            "currency",
            "availability",
            "child_regions",
        }
        
        class properties:
        
            @staticmethod
            def availability() -> typing.Type['CostCalculatorCountryAvailability']:
                return CostCalculatorCountryAvailability
            
            
            class child_regions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MinimalRegion']:
                        return MinimalRegion
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MinimalRegion'], typing.List['MinimalRegion']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'child_regions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MinimalRegion':
                    return super().__getitem__(i)
            code = schemas.StrSchema
        
            @staticmethod
            def currency() -> typing.Type['Currency']:
                return Currency
            name = schemas.StrSchema
            original_country_slug = schemas.StrSchema
            region_slug = schemas.StrSchema
            has_additional_fields = schemas.BoolSchema
            __annotations__ = {
                "availability": availability,
                "child_regions": child_regions,
                "code": code,
                "currency": currency,
                "name": name,
                "original_country_slug": original_country_slug,
                "region_slug": region_slug,
                "has_additional_fields": has_additional_fields,
            }
    
    original_country_slug: MetaOapg.properties.original_country_slug
    code: MetaOapg.properties.code
    name: MetaOapg.properties.name
    region_slug: MetaOapg.properties.region_slug
    currency: 'Currency'
    availability: 'CostCalculatorCountryAvailability'
    child_regions: MetaOapg.properties.child_regions
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availability"]) -> 'CostCalculatorCountryAvailability': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["child_regions"]) -> MetaOapg.properties.child_regions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_country_slug"]) -> MetaOapg.properties.original_country_slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region_slug"]) -> MetaOapg.properties.region_slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_additional_fields"]) -> MetaOapg.properties.has_additional_fields: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["availability", "child_regions", "code", "currency", "name", "original_country_slug", "region_slug", "has_additional_fields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availability"]) -> 'CostCalculatorCountryAvailability': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["child_regions"]) -> MetaOapg.properties.child_regions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_country_slug"]) -> MetaOapg.properties.original_country_slug: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region_slug"]) -> MetaOapg.properties.region_slug: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_additional_fields"]) -> typing.Union[MetaOapg.properties.has_additional_fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["availability", "child_regions", "code", "currency", "name", "original_country_slug", "region_slug", "has_additional_fields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        original_country_slug: typing.Union[MetaOapg.properties.original_country_slug, str, ],
        code: typing.Union[MetaOapg.properties.code, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        region_slug: typing.Union[MetaOapg.properties.region_slug, str, ],
        currency: 'Currency',
        availability: 'CostCalculatorCountryAvailability',
        child_regions: typing.Union[MetaOapg.properties.child_regions, list, tuple, ],
        has_additional_fields: typing.Union[MetaOapg.properties.has_additional_fields, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CostCalculatorCountryLevelRegion':
        return super().__new__(
            cls,
            *args,
            original_country_slug=original_country_slug,
            code=code,
            name=name,
            region_slug=region_slug,
            currency=currency,
            availability=availability,
            child_regions=child_regions,
            has_additional_fields=has_additional_fields,
            _configuration=_configuration,
            **kwargs,
        )

from remote_python_sdk.model.cost_calculator_country_availability import CostCalculatorCountryAvailability
from remote_python_sdk.model.currency import Currency
from remote_python_sdk.model.minimal_region import MinimalRegion

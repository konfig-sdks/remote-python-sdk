# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class CostCalculatorCosts(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "extra_statutory_payments_total",
            "annual_total",
            "monthly_tce",
            "annual_contributions_total",
            "monthly_contributions_total",
            "currency",
            "annual_gross_salary",
            "monthly_gross_salary",
            "monthly_total",
        }
        
        class properties:
            annual_contributions_total = schemas.IntSchema
            annual_gross_salary = schemas.IntSchema
            annual_total = schemas.IntSchema
        
            @staticmethod
            def currency() -> typing.Type['Currency']:
                return Currency
            extra_statutory_payments_total = schemas.IntSchema
            monthly_contributions_total = schemas.IntSchema
            monthly_gross_salary = schemas.IntSchema
            monthly_tce = schemas.IntSchema
            monthly_total = schemas.IntSchema
            
            
            class annual_benefits_breakdown(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CostCalculatorCost']:
                        return CostCalculatorCost
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CostCalculatorCost'], typing.List['CostCalculatorCost']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'annual_benefits_breakdown':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CostCalculatorCost':
                    return super().__getitem__(i)
            annual_benefits_total = schemas.IntSchema
            
            
            class annual_contributions_breakdown(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CostCalculatorCost']:
                        return CostCalculatorCost
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CostCalculatorCost'], typing.List['CostCalculatorCost']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'annual_contributions_breakdown':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CostCalculatorCost':
                    return super().__getitem__(i)
            
            
            class extra_statutory_payments_breakdown(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CostCalculatorCost']:
                        return CostCalculatorCost
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CostCalculatorCost'], typing.List['CostCalculatorCost']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'extra_statutory_payments_breakdown':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CostCalculatorCost':
                    return super().__getitem__(i)
            
            
            class monthly_benefits_breakdown(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CostCalculatorCost']:
                        return CostCalculatorCost
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CostCalculatorCost'], typing.List['CostCalculatorCost']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'monthly_benefits_breakdown':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CostCalculatorCost':
                    return super().__getitem__(i)
            monthly_benefits_total = schemas.IntSchema
            
            
            class monthly_contributions_breakdown(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CostCalculatorCost']:
                        return CostCalculatorCost
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CostCalculatorCost'], typing.List['CostCalculatorCost']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'monthly_contributions_breakdown':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CostCalculatorCost':
                    return super().__getitem__(i)
            __annotations__ = {
                "annual_contributions_total": annual_contributions_total,
                "annual_gross_salary": annual_gross_salary,
                "annual_total": annual_total,
                "currency": currency,
                "extra_statutory_payments_total": extra_statutory_payments_total,
                "monthly_contributions_total": monthly_contributions_total,
                "monthly_gross_salary": monthly_gross_salary,
                "monthly_tce": monthly_tce,
                "monthly_total": monthly_total,
                "annual_benefits_breakdown": annual_benefits_breakdown,
                "annual_benefits_total": annual_benefits_total,
                "annual_contributions_breakdown": annual_contributions_breakdown,
                "extra_statutory_payments_breakdown": extra_statutory_payments_breakdown,
                "monthly_benefits_breakdown": monthly_benefits_breakdown,
                "monthly_benefits_total": monthly_benefits_total,
                "monthly_contributions_breakdown": monthly_contributions_breakdown,
            }
    
    extra_statutory_payments_total: MetaOapg.properties.extra_statutory_payments_total
    annual_total: MetaOapg.properties.annual_total
    monthly_tce: MetaOapg.properties.monthly_tce
    annual_contributions_total: MetaOapg.properties.annual_contributions_total
    monthly_contributions_total: MetaOapg.properties.monthly_contributions_total
    currency: 'Currency'
    annual_gross_salary: MetaOapg.properties.annual_gross_salary
    monthly_gross_salary: MetaOapg.properties.monthly_gross_salary
    monthly_total: MetaOapg.properties.monthly_total
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annual_contributions_total"]) -> MetaOapg.properties.annual_contributions_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annual_gross_salary"]) -> MetaOapg.properties.annual_gross_salary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annual_total"]) -> MetaOapg.properties.annual_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_statutory_payments_total"]) -> MetaOapg.properties.extra_statutory_payments_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_contributions_total"]) -> MetaOapg.properties.monthly_contributions_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_gross_salary"]) -> MetaOapg.properties.monthly_gross_salary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_tce"]) -> MetaOapg.properties.monthly_tce: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_total"]) -> MetaOapg.properties.monthly_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annual_benefits_breakdown"]) -> MetaOapg.properties.annual_benefits_breakdown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annual_benefits_total"]) -> MetaOapg.properties.annual_benefits_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annual_contributions_breakdown"]) -> MetaOapg.properties.annual_contributions_breakdown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_statutory_payments_breakdown"]) -> MetaOapg.properties.extra_statutory_payments_breakdown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_benefits_breakdown"]) -> MetaOapg.properties.monthly_benefits_breakdown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_benefits_total"]) -> MetaOapg.properties.monthly_benefits_total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthly_contributions_breakdown"]) -> MetaOapg.properties.monthly_contributions_breakdown: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["annual_contributions_total", "annual_gross_salary", "annual_total", "currency", "extra_statutory_payments_total", "monthly_contributions_total", "monthly_gross_salary", "monthly_tce", "monthly_total", "annual_benefits_breakdown", "annual_benefits_total", "annual_contributions_breakdown", "extra_statutory_payments_breakdown", "monthly_benefits_breakdown", "monthly_benefits_total", "monthly_contributions_breakdown", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annual_contributions_total"]) -> MetaOapg.properties.annual_contributions_total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annual_gross_salary"]) -> MetaOapg.properties.annual_gross_salary: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annual_total"]) -> MetaOapg.properties.annual_total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_statutory_payments_total"]) -> MetaOapg.properties.extra_statutory_payments_total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_contributions_total"]) -> MetaOapg.properties.monthly_contributions_total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_gross_salary"]) -> MetaOapg.properties.monthly_gross_salary: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_tce"]) -> MetaOapg.properties.monthly_tce: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_total"]) -> MetaOapg.properties.monthly_total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annual_benefits_breakdown"]) -> typing.Union[MetaOapg.properties.annual_benefits_breakdown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annual_benefits_total"]) -> typing.Union[MetaOapg.properties.annual_benefits_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annual_contributions_breakdown"]) -> typing.Union[MetaOapg.properties.annual_contributions_breakdown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_statutory_payments_breakdown"]) -> typing.Union[MetaOapg.properties.extra_statutory_payments_breakdown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_benefits_breakdown"]) -> typing.Union[MetaOapg.properties.monthly_benefits_breakdown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_benefits_total"]) -> typing.Union[MetaOapg.properties.monthly_benefits_total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthly_contributions_breakdown"]) -> typing.Union[MetaOapg.properties.monthly_contributions_breakdown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["annual_contributions_total", "annual_gross_salary", "annual_total", "currency", "extra_statutory_payments_total", "monthly_contributions_total", "monthly_gross_salary", "monthly_tce", "monthly_total", "annual_benefits_breakdown", "annual_benefits_total", "annual_contributions_breakdown", "extra_statutory_payments_breakdown", "monthly_benefits_breakdown", "monthly_benefits_total", "monthly_contributions_breakdown", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        extra_statutory_payments_total: typing.Union[MetaOapg.properties.extra_statutory_payments_total, decimal.Decimal, int, ],
        annual_total: typing.Union[MetaOapg.properties.annual_total, decimal.Decimal, int, ],
        monthly_tce: typing.Union[MetaOapg.properties.monthly_tce, decimal.Decimal, int, ],
        annual_contributions_total: typing.Union[MetaOapg.properties.annual_contributions_total, decimal.Decimal, int, ],
        monthly_contributions_total: typing.Union[MetaOapg.properties.monthly_contributions_total, decimal.Decimal, int, ],
        currency: 'Currency',
        annual_gross_salary: typing.Union[MetaOapg.properties.annual_gross_salary, decimal.Decimal, int, ],
        monthly_gross_salary: typing.Union[MetaOapg.properties.monthly_gross_salary, decimal.Decimal, int, ],
        monthly_total: typing.Union[MetaOapg.properties.monthly_total, decimal.Decimal, int, ],
        annual_benefits_breakdown: typing.Union[MetaOapg.properties.annual_benefits_breakdown, list, tuple, schemas.Unset] = schemas.unset,
        annual_benefits_total: typing.Union[MetaOapg.properties.annual_benefits_total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        annual_contributions_breakdown: typing.Union[MetaOapg.properties.annual_contributions_breakdown, list, tuple, schemas.Unset] = schemas.unset,
        extra_statutory_payments_breakdown: typing.Union[MetaOapg.properties.extra_statutory_payments_breakdown, list, tuple, schemas.Unset] = schemas.unset,
        monthly_benefits_breakdown: typing.Union[MetaOapg.properties.monthly_benefits_breakdown, list, tuple, schemas.Unset] = schemas.unset,
        monthly_benefits_total: typing.Union[MetaOapg.properties.monthly_benefits_total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        monthly_contributions_breakdown: typing.Union[MetaOapg.properties.monthly_contributions_breakdown, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CostCalculatorCosts':
        return super().__new__(
            cls,
            *args,
            extra_statutory_payments_total=extra_statutory_payments_total,
            annual_total=annual_total,
            monthly_tce=monthly_tce,
            annual_contributions_total=annual_contributions_total,
            monthly_contributions_total=monthly_contributions_total,
            currency=currency,
            annual_gross_salary=annual_gross_salary,
            monthly_gross_salary=monthly_gross_salary,
            monthly_total=monthly_total,
            annual_benefits_breakdown=annual_benefits_breakdown,
            annual_benefits_total=annual_benefits_total,
            annual_contributions_breakdown=annual_contributions_breakdown,
            extra_statutory_payments_breakdown=extra_statutory_payments_breakdown,
            monthly_benefits_breakdown=monthly_benefits_breakdown,
            monthly_benefits_total=monthly_benefits_total,
            monthly_contributions_breakdown=monthly_contributions_breakdown,
            _configuration=_configuration,
            **kwargs,
        )

from remote_python_sdk.model.cost_calculator_cost import CostCalculatorCost
from remote_python_sdk.model.currency import Currency

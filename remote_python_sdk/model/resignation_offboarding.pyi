# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class ResignationOffboarding(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "employment_id",
            "proposed_last_working_day",
            "resignation_reason",
            "requested_by",
            "submitted_at",
            "termination_date",
            "id",
            "type",
            "status",
        }
        
        class properties:
            employment_id = schemas.StrSchema
            id = schemas.StrSchema
            proposed_last_working_day = schemas.DateSchema
            requested_by = schemas.StrSchema
            
            
            class resignation_reason(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CANCELLATION_BEFORE_START_DATE(cls):
                    return cls("cancellation_before_start_date")
                
                @schemas.classproperty
                def COMPANY_CULTURE_OR_VALUES(cls):
                    return cls("company_culture_or_values")
                
                @schemas.classproperty
                def CONVERSION_TO_CONTRACTOR(cls):
                    return cls("conversion_to_contractor")
                
                @schemas.classproperty
                def DISSATISFACTION_WITH_REMOTE_SERVICE(cls):
                    return cls("dissatisfaction_with_remote_service")
                
                @schemas.classproperty
                def INCAPACITY_TO_PERFORM_INHERENT_DUTIES(cls):
                    return cls("incapacity_to_perform_inherent_duties")
                
                @schemas.classproperty
                def INFRASTRUCTURE_CHALLENGES(cls):
                    return cls("infrastructure_challenges")
                
                @schemas.classproperty
                def LACK_OF_RECOGNITION(cls):
                    return cls("lack_of_recognition")
                
                @schemas.classproperty
                def LEADERSHIP(cls):
                    return cls("leadership")
                
                @schemas.classproperty
                def MUTUAL_AGREEMENT(cls):
                    return cls("mutual_agreement")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
                
                @schemas.classproperty
                def OTHER_JOB_OPPORTUNITY(cls):
                    return cls("other_job_opportunity")
                
                @schemas.classproperty
                def PERSONAL_REASONS(cls):
                    return cls("personal_reasons")
                
                @schemas.classproperty
                def POSITION_DOES_NOT_MEET_EXPECTATIONS(cls):
                    return cls("position_does_not_meet_expectations")
                
                @schemas.classproperty
                def RELATIONSHIP_WITH_COWORKERS(cls):
                    return cls("relationship_with_coworkers")
                
                @schemas.classproperty
                def RELOCATION_FROM_ENTITY_TO_ENTITY_BY_EMPLOYEE(cls):
                    return cls("relocation_from_entity_to_entity_by_employee")
                
                @schemas.classproperty
                def RELOCATION_LEAVING_REMOTE(cls):
                    return cls("relocation_leaving_remote")
                
                @schemas.classproperty
                def REMUNERATION_AND_BENEFITS(cls):
                    return cls("remuneration_and_benefits")
                
                @schemas.classproperty
                def RETIREMENT(cls):
                    return cls("retirement")
                
                @schemas.classproperty
                def TRANSFER_AND_RELOCATION_NEW_CUSTOMER_AND_NEW_COUNTRY(cls):
                    return cls("transfer_and_relocation_new_customer_and_new_country")
                
                @schemas.classproperty
                def TRANSFER_BETWEEN_REMOTE_CUSTOMER(cls):
                    return cls("transfer_between_remote_customer")
                
                @schemas.classproperty
                def TRANSFER_FROM_REMOTE_TO_CUSTOMER(cls):
                    return cls("transfer_from_remote_to_customer")
                
                @schemas.classproperty
                def TRANSFER_FROM_REMOTE_TO_OTHER_EOR(cls):
                    return cls("transfer_from_remote_to_other_eor")
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SUBMITTED(cls):
                    return cls("submitted")
                
                @schemas.classproperty
                def IN_REVIEW(cls):
                    return cls("in_review")
                
                @schemas.classproperty
                def DONE(cls):
                    return cls("done")
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("canceled")
            submitted_at = schemas.StrSchema
            
            
            class termination_date(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'termination_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def RESIGNATION(cls):
                    return cls("resignation")
            additional_comments = schemas.StrSchema
            employer_awareness = schemas.StrSchema
            reason_description = schemas.StrSchema
            __annotations__ = {
                "employment_id": employment_id,
                "id": id,
                "proposed_last_working_day": proposed_last_working_day,
                "requested_by": requested_by,
                "resignation_reason": resignation_reason,
                "status": status,
                "submitted_at": submitted_at,
                "termination_date": termination_date,
                "type": type,
                "additional_comments": additional_comments,
                "employer_awareness": employer_awareness,
                "reason_description": reason_description,
            }
    
    employment_id: MetaOapg.properties.employment_id
    proposed_last_working_day: MetaOapg.properties.proposed_last_working_day
    resignation_reason: MetaOapg.properties.resignation_reason
    requested_by: MetaOapg.properties.requested_by
    submitted_at: MetaOapg.properties.submitted_at
    termination_date: MetaOapg.properties.termination_date
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment_id"]) -> MetaOapg.properties.employment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposed_last_working_day"]) -> MetaOapg.properties.proposed_last_working_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requested_by"]) -> MetaOapg.properties.requested_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resignation_reason"]) -> MetaOapg.properties.resignation_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submitted_at"]) -> MetaOapg.properties.submitted_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termination_date"]) -> MetaOapg.properties.termination_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_comments"]) -> MetaOapg.properties.additional_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer_awareness"]) -> MetaOapg.properties.employer_awareness: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason_description"]) -> MetaOapg.properties.reason_description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employment_id", "id", "proposed_last_working_day", "requested_by", "resignation_reason", "status", "submitted_at", "termination_date", "type", "additional_comments", "employer_awareness", "reason_description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment_id"]) -> MetaOapg.properties.employment_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposed_last_working_day"]) -> MetaOapg.properties.proposed_last_working_day: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requested_by"]) -> MetaOapg.properties.requested_by: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resignation_reason"]) -> MetaOapg.properties.resignation_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submitted_at"]) -> MetaOapg.properties.submitted_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termination_date"]) -> MetaOapg.properties.termination_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_comments"]) -> typing.Union[MetaOapg.properties.additional_comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer_awareness"]) -> typing.Union[MetaOapg.properties.employer_awareness, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason_description"]) -> typing.Union[MetaOapg.properties.reason_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employment_id", "id", "proposed_last_working_day", "requested_by", "resignation_reason", "status", "submitted_at", "termination_date", "type", "additional_comments", "employer_awareness", "reason_description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employment_id: typing.Union[MetaOapg.properties.employment_id, str, ],
        proposed_last_working_day: typing.Union[MetaOapg.properties.proposed_last_working_day, str, date, ],
        resignation_reason: typing.Union[MetaOapg.properties.resignation_reason, str, ],
        requested_by: typing.Union[MetaOapg.properties.requested_by, str, ],
        submitted_at: typing.Union[MetaOapg.properties.submitted_at, str, ],
        termination_date: typing.Union[MetaOapg.properties.termination_date, None, str, date, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        additional_comments: typing.Union[MetaOapg.properties.additional_comments, str, schemas.Unset] = schemas.unset,
        employer_awareness: typing.Union[MetaOapg.properties.employer_awareness, str, schemas.Unset] = schemas.unset,
        reason_description: typing.Union[MetaOapg.properties.reason_description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ResignationOffboarding':
        return super().__new__(
            cls,
            *args,
            employment_id=employment_id,
            proposed_last_working_day=proposed_last_working_day,
            resignation_reason=resignation_reason,
            requested_by=requested_by,
            submitted_at=submitted_at,
            termination_date=termination_date,
            id=id,
            type=type,
            status=status,
            additional_comments=additional_comments,
            employer_awareness=employer_awareness,
            reason_description=reason_description,
            _configuration=_configuration,
            **kwargs,
        )

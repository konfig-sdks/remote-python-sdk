# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class MinimalContractAmendment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Minimal Contract Amendment
    """


    class MetaOapg:
        required = {
            "employment_id",
            "requested_by",
            "reason_for_change",
            "submitted_at",
            "id",
            "requested_effective_date",
            "status",
        }
        
        class properties:
            employment_id = schemas.StrSchema
            id = schemas.StrSchema
            
            
            class reason_for_change(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ANNUAL_PAY_ADJUSTMENT(cls):
                    return cls("annual_pay_adjustment")
                
                @schemas.classproperty
                def COUNTRY_RULE_CHANGE(cls):
                    return cls("country_rule_change")
                
                @schemas.classproperty
                def ERROR_CORRECTION(cls):
                    return cls("error_correction")
                
                @schemas.classproperty
                def JOB_CHANGE_REEVALUATION(cls):
                    return cls("job_change_reevaluation")
                
                @schemas.classproperty
                def PROMOTION(cls):
                    return cls("promotion")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
            requested_by = schemas.StrSchema
            requested_effective_date = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SUBMITTED(cls):
                    return cls("submitted")
                
                @schemas.classproperty
                def IN_REVIEW(cls):
                    return cls("in_review")
                
                @schemas.classproperty
                def DONE(cls):
                    return cls("done")
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("canceled")
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("deleted")
            submitted_at = schemas.StrSchema
            job_title = schemas.StrSchema
            __annotations__ = {
                "employment_id": employment_id,
                "id": id,
                "reason_for_change": reason_for_change,
                "requested_by": requested_by,
                "requested_effective_date": requested_effective_date,
                "status": status,
                "submitted_at": submitted_at,
                "job_title": job_title,
            }
    
    employment_id: MetaOapg.properties.employment_id
    requested_by: MetaOapg.properties.requested_by
    reason_for_change: MetaOapg.properties.reason_for_change
    submitted_at: MetaOapg.properties.submitted_at
    id: MetaOapg.properties.id
    requested_effective_date: MetaOapg.properties.requested_effective_date
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment_id"]) -> MetaOapg.properties.employment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason_for_change"]) -> MetaOapg.properties.reason_for_change: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requested_by"]) -> MetaOapg.properties.requested_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requested_effective_date"]) -> MetaOapg.properties.requested_effective_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submitted_at"]) -> MetaOapg.properties.submitted_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_title"]) -> MetaOapg.properties.job_title: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employment_id", "id", "reason_for_change", "requested_by", "requested_effective_date", "status", "submitted_at", "job_title", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment_id"]) -> MetaOapg.properties.employment_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason_for_change"]) -> MetaOapg.properties.reason_for_change: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requested_by"]) -> MetaOapg.properties.requested_by: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requested_effective_date"]) -> MetaOapg.properties.requested_effective_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submitted_at"]) -> MetaOapg.properties.submitted_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_title"]) -> typing.Union[MetaOapg.properties.job_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employment_id", "id", "reason_for_change", "requested_by", "requested_effective_date", "status", "submitted_at", "job_title", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employment_id: typing.Union[MetaOapg.properties.employment_id, str, ],
        requested_by: typing.Union[MetaOapg.properties.requested_by, str, ],
        reason_for_change: typing.Union[MetaOapg.properties.reason_for_change, str, ],
        submitted_at: typing.Union[MetaOapg.properties.submitted_at, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        requested_effective_date: typing.Union[MetaOapg.properties.requested_effective_date, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        job_title: typing.Union[MetaOapg.properties.job_title, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MinimalContractAmendment':
        return super().__new__(
            cls,
            *args,
            employment_id=employment_id,
            requested_by=requested_by,
            reason_for_change=reason_for_change,
            submitted_at=submitted_at,
            id=id,
            requested_effective_date=requested_effective_date,
            status=status,
            job_title=job_title,
            _configuration=_configuration,
            **kwargs,
        )

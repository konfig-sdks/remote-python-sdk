# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class TerminationDetailsParams(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "proposed_termination_date",
            "risk_assessment_reasons",
            "termination_reason",
            "reason_description",
            "will_challenge_termination",
            "confidential",
        }
        
        class properties:
            confidential = schemas.BoolSchema
            proposed_termination_date = schemas.DateSchema
            reason_description = schemas.StrSchema
        
            @staticmethod
            def risk_assessment_reasons() -> typing.Type['TerminationDetailsParamsRiskAssessmentReasons']:
                return TerminationDetailsParamsRiskAssessmentReasons
            
            
            class termination_reason(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CANCELLATION_BEFORE_START_DATE(cls):
                    return cls("cancellation_before_start_date")
                
                @schemas.classproperty
                def COMPLIANCE_ISSUE(cls):
                    return cls("compliance_issue")
                
                @schemas.classproperty
                def CONVERSION_TO_CONTRACTOR(cls):
                    return cls("conversion_to_contractor")
                
                @schemas.classproperty
                def DISSATISFACTION_WITH_REMOTE_SERVICE(cls):
                    return cls("dissatisfaction_with_remote_service")
                
                @schemas.classproperty
                def END_OF_FIXED_TERM_CONTRACT_COMPLIANCE_ISSUE(cls):
                    return cls("end_of_fixed_term_contract_compliance_issue")
                
                @schemas.classproperty
                def END_OF_FIXED_TERM_CONTRACT_INCAPACITY_TO_PERFORM_INHERENT_DUTIES(cls):
                    return cls("end_of_fixed_term_contract_incapacity_to_perform_inherent_duties")
                
                @schemas.classproperty
                def END_OF_FIXED_TERM_CONTRACT_LOCAL_REGULATIONS_MAX_TERM_REACHED(cls):
                    return cls("end_of_fixed_term_contract_local_regulations_max_term_reached")
                
                @schemas.classproperty
                def END_OF_FIXED_TERM_CONTRACT_MISCONDUCT(cls):
                    return cls("end_of_fixed_term_contract_misconduct")
                
                @schemas.classproperty
                def END_OF_FIXED_TERM_CONTRACT_OPERATIONAL_REASONS(cls):
                    return cls("end_of_fixed_term_contract_operational_reasons")
                
                @schemas.classproperty
                def END_OF_FIXED_TERM_CONTRACT_OTHER(cls):
                    return cls("end_of_fixed_term_contract_other")
                
                @schemas.classproperty
                def END_OF_FIXED_TERM_CONTRACT_PERFORMANCE(cls):
                    return cls("end_of_fixed_term_contract_performance")
                
                @schemas.classproperty
                def END_OF_FIXED_TERM_CONTRACT_REDUNDANCY(cls):
                    return cls("end_of_fixed_term_contract_redundancy")
                
                @schemas.classproperty
                def END_OF_FIXED_TERM_CONTRACT_VALUES(cls):
                    return cls("end_of_fixed_term_contract_values")
                
                @schemas.classproperty
                def GROSS_MISCONDUCT(cls):
                    return cls("gross_misconduct")
                
                @schemas.classproperty
                def INCAPACITY_TO_PERFORM_INHERENT_DUTIES(cls):
                    return cls("incapacity_to_perform_inherent_duties")
                
                @schemas.classproperty
                def JOB_ABANDONMENT(cls):
                    return cls("job_abandonment")
                
                @schemas.classproperty
                def MUTUAL_AGREEMENT(cls):
                    return cls("mutual_agreement")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
                
                @schemas.classproperty
                def PERFORMANCE(cls):
                    return cls("performance")
                
                @schemas.classproperty
                def VALUES(cls):
                    return cls("values")
                
                @schemas.classproperty
                def WORKFORCE_REDUCTION(cls):
                    return cls("workforce_reduction")
            will_challenge_termination = schemas.BoolSchema
            additional_comments = schemas.StrSchema
        
            @staticmethod
            def employee_awareness() -> typing.Type['TerminationDetailsParamsEmployeeAwareness']:
                return TerminationDetailsParamsEmployeeAwareness
            personal_email = schemas.StrSchema
            
            
            class termination_reason_files(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['OffboardingFile']:
                        return OffboardingFile
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['OffboardingFile'], typing.List['OffboardingFile']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'termination_reason_files':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'OffboardingFile':
                    return super().__getitem__(i)
        
            @staticmethod
            def timesheet_file() -> typing.Type['OffboardingFile']:
                return OffboardingFile
            will_challenge_termination_description = schemas.StrSchema
            __annotations__ = {
                "confidential": confidential,
                "proposed_termination_date": proposed_termination_date,
                "reason_description": reason_description,
                "risk_assessment_reasons": risk_assessment_reasons,
                "termination_reason": termination_reason,
                "will_challenge_termination": will_challenge_termination,
                "additional_comments": additional_comments,
                "employee_awareness": employee_awareness,
                "personal_email": personal_email,
                "termination_reason_files": termination_reason_files,
                "timesheet_file": timesheet_file,
                "will_challenge_termination_description": will_challenge_termination_description,
            }
    
    proposed_termination_date: MetaOapg.properties.proposed_termination_date
    risk_assessment_reasons: 'TerminationDetailsParamsRiskAssessmentReasons'
    termination_reason: MetaOapg.properties.termination_reason
    reason_description: MetaOapg.properties.reason_description
    will_challenge_termination: MetaOapg.properties.will_challenge_termination
    confidential: MetaOapg.properties.confidential
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confidential"]) -> MetaOapg.properties.confidential: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposed_termination_date"]) -> MetaOapg.properties.proposed_termination_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason_description"]) -> MetaOapg.properties.reason_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["risk_assessment_reasons"]) -> 'TerminationDetailsParamsRiskAssessmentReasons': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termination_reason"]) -> MetaOapg.properties.termination_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["will_challenge_termination"]) -> MetaOapg.properties.will_challenge_termination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_comments"]) -> MetaOapg.properties.additional_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_awareness"]) -> 'TerminationDetailsParamsEmployeeAwareness': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personal_email"]) -> MetaOapg.properties.personal_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termination_reason_files"]) -> MetaOapg.properties.termination_reason_files: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timesheet_file"]) -> 'OffboardingFile': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["will_challenge_termination_description"]) -> MetaOapg.properties.will_challenge_termination_description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["confidential", "proposed_termination_date", "reason_description", "risk_assessment_reasons", "termination_reason", "will_challenge_termination", "additional_comments", "employee_awareness", "personal_email", "termination_reason_files", "timesheet_file", "will_challenge_termination_description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confidential"]) -> MetaOapg.properties.confidential: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposed_termination_date"]) -> MetaOapg.properties.proposed_termination_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason_description"]) -> MetaOapg.properties.reason_description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["risk_assessment_reasons"]) -> 'TerminationDetailsParamsRiskAssessmentReasons': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termination_reason"]) -> MetaOapg.properties.termination_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["will_challenge_termination"]) -> MetaOapg.properties.will_challenge_termination: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_comments"]) -> typing.Union[MetaOapg.properties.additional_comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_awareness"]) -> typing.Union['TerminationDetailsParamsEmployeeAwareness', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personal_email"]) -> typing.Union[MetaOapg.properties.personal_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termination_reason_files"]) -> typing.Union[MetaOapg.properties.termination_reason_files, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timesheet_file"]) -> typing.Union['OffboardingFile', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["will_challenge_termination_description"]) -> typing.Union[MetaOapg.properties.will_challenge_termination_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["confidential", "proposed_termination_date", "reason_description", "risk_assessment_reasons", "termination_reason", "will_challenge_termination", "additional_comments", "employee_awareness", "personal_email", "termination_reason_files", "timesheet_file", "will_challenge_termination_description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        proposed_termination_date: typing.Union[MetaOapg.properties.proposed_termination_date, str, date, ],
        risk_assessment_reasons: 'TerminationDetailsParamsRiskAssessmentReasons',
        termination_reason: typing.Union[MetaOapg.properties.termination_reason, str, ],
        reason_description: typing.Union[MetaOapg.properties.reason_description, str, ],
        will_challenge_termination: typing.Union[MetaOapg.properties.will_challenge_termination, bool, ],
        confidential: typing.Union[MetaOapg.properties.confidential, bool, ],
        additional_comments: typing.Union[MetaOapg.properties.additional_comments, str, schemas.Unset] = schemas.unset,
        employee_awareness: typing.Union['TerminationDetailsParamsEmployeeAwareness', schemas.Unset] = schemas.unset,
        personal_email: typing.Union[MetaOapg.properties.personal_email, str, schemas.Unset] = schemas.unset,
        termination_reason_files: typing.Union[MetaOapg.properties.termination_reason_files, list, tuple, schemas.Unset] = schemas.unset,
        timesheet_file: typing.Union['OffboardingFile', schemas.Unset] = schemas.unset,
        will_challenge_termination_description: typing.Union[MetaOapg.properties.will_challenge_termination_description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TerminationDetailsParams':
        return super().__new__(
            cls,
            *args,
            proposed_termination_date=proposed_termination_date,
            risk_assessment_reasons=risk_assessment_reasons,
            termination_reason=termination_reason,
            reason_description=reason_description,
            will_challenge_termination=will_challenge_termination,
            confidential=confidential,
            additional_comments=additional_comments,
            employee_awareness=employee_awareness,
            personal_email=personal_email,
            termination_reason_files=termination_reason_files,
            timesheet_file=timesheet_file,
            will_challenge_termination_description=will_challenge_termination_description,
            _configuration=_configuration,
            **kwargs,
        )

from remote_python_sdk.model.offboarding_file import OffboardingFile
from remote_python_sdk.model.termination_details_params_employee_awareness import TerminationDetailsParamsEmployeeAwareness
from remote_python_sdk.model.termination_details_params_risk_assessment_reasons import TerminationDetailsParamsRiskAssessmentReasons

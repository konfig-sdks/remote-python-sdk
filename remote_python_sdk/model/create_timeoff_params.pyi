# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class CreateTimeoffParams(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Timeoff creation params
    """


    class MetaOapg:
        required = {
            "employment_id",
            "end_date",
            "timeoff_days",
            "timezone",
            "timeoff_type",
            "start_date",
        }
        
        class properties:
            employment_id = schemas.StrSchema
            end_date = schemas.StrSchema
            start_date = schemas.StrSchema
            
            
            class timeoff_days(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TimeoffDaysParams']:
                        return TimeoffDaysParams
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TimeoffDaysParams'], typing.List['TimeoffDaysParams']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'timeoff_days':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TimeoffDaysParams':
                    return super().__getitem__(i)
        
            @staticmethod
            def timeoff_type() -> typing.Type['TimeoffType']:
                return TimeoffType
            timezone = schemas.StrSchema
        
            @staticmethod
            def document() -> typing.Type['TimeoffDocumentParams']:
                return TimeoffDocumentParams
            notes = schemas.StrSchema
            __annotations__ = {
                "employment_id": employment_id,
                "end_date": end_date,
                "start_date": start_date,
                "timeoff_days": timeoff_days,
                "timeoff_type": timeoff_type,
                "timezone": timezone,
                "document": document,
                "notes": notes,
            }
    
    employment_id: MetaOapg.properties.employment_id
    end_date: MetaOapg.properties.end_date
    timeoff_days: MetaOapg.properties.timeoff_days
    timezone: MetaOapg.properties.timezone
    timeoff_type: 'TimeoffType'
    start_date: MetaOapg.properties.start_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment_id"]) -> MetaOapg.properties.employment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeoff_days"]) -> MetaOapg.properties.timeoff_days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeoff_type"]) -> 'TimeoffType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document"]) -> 'TimeoffDocumentParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employment_id", "end_date", "start_date", "timeoff_days", "timeoff_type", "timezone", "document", "notes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment_id"]) -> MetaOapg.properties.employment_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeoff_days"]) -> MetaOapg.properties.timeoff_days: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeoff_type"]) -> 'TimeoffType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document"]) -> typing.Union['TimeoffDocumentParams', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employment_id", "end_date", "start_date", "timeoff_days", "timeoff_type", "timezone", "document", "notes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employment_id: typing.Union[MetaOapg.properties.employment_id, str, ],
        end_date: typing.Union[MetaOapg.properties.end_date, str, ],
        timeoff_days: typing.Union[MetaOapg.properties.timeoff_days, list, tuple, ],
        timezone: typing.Union[MetaOapg.properties.timezone, str, ],
        timeoff_type: 'TimeoffType',
        start_date: typing.Union[MetaOapg.properties.start_date, str, ],
        document: typing.Union['TimeoffDocumentParams', schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateTimeoffParams':
        return super().__new__(
            cls,
            *args,
            employment_id=employment_id,
            end_date=end_date,
            timeoff_days=timeoff_days,
            timezone=timezone,
            timeoff_type=timeoff_type,
            start_date=start_date,
            document=document,
            notes=notes,
            _configuration=_configuration,
            **kwargs,
        )

from remote_python_sdk.model.timeoff_days_params import TimeoffDaysParams
from remote_python_sdk.model.timeoff_document_params import TimeoffDocumentParams
from remote_python_sdk.model.timeoff_type import TimeoffType

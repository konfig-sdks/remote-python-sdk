# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class CreateOneTimeIncentiveParams(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "employment_id",
            "amount",
            "effective_date",
            "amount_tax_type",
            "type",
        }
        
        class properties:
            amount = schemas.NumberSchema
            amount_tax_type = schemas.StrSchema
            effective_date = schemas.StrSchema
            employment_id = schemas.StrSchema
            type = schemas.StrSchema
            note = schemas.StrSchema
            __annotations__ = {
                "amount": amount,
                "amount_tax_type": amount_tax_type,
                "effective_date": effective_date,
                "employment_id": employment_id,
                "type": type,
                "note": note,
            }
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    employment_id = schemas.StrSchema
                    
                    
                    class type(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def ACTING_UP_ALLOWANCE(cls):
                            return cls("acting_up_allowance")
                        
                        @schemas.classproperty
                        def ALLOWANCE(cls):
                            return cls("allowance")
                        
                        @schemas.classproperty
                        def CAR_ALLOWANCE(cls):
                            return cls("car_allowance")
                        
                        @schemas.classproperty
                        def HEALTH_AND_WELLNESS_ALLOWANCE(cls):
                            return cls("health_and_wellness_allowance")
                        
                        @schemas.classproperty
                        def INTERNET_ALLOWANCE(cls):
                            return cls("internet_allowance")
                        
                        @schemas.classproperty
                        def MEAL_ALLOWANCE(cls):
                            return cls("meal_allowance")
                        
                        @schemas.classproperty
                        def ON_CALL_ALLOWANCE(cls):
                            return cls("on_call_allowance")
                        
                        @schemas.classproperty
                        def PARENTHOOD_ALLOWANCE(cls):
                            return cls("parenthood_allowance")
                        
                        @schemas.classproperty
                        def PHONE_ALLOWANCE(cls):
                            return cls("phone_allowance")
                        
                        @schemas.classproperty
                        def RELOCATION_ALLOWANCE(cls):
                            return cls("relocation_allowance")
                        
                        @schemas.classproperty
                        def TRAVEL_ALLOWANCE(cls):
                            return cls("travel_allowance")
                        
                        @schemas.classproperty
                        def WORK_FROM_HOME_ALLOWANCE(cls):
                            return cls("work_from_home_allowance")
                        
                        @schemas.classproperty
                        def BONUS(cls):
                            return cls("bonus")
                        
                        @schemas.classproperty
                        def HOLIDAY_BONUS(cls):
                            return cls("holiday_bonus")
                        
                        @schemas.classproperty
                        def REFERRAL_BONUS(cls):
                            return cls("referral_bonus")
                        
                        @schemas.classproperty
                        def RETENTION_BONUS(cls):
                            return cls("retention_bonus")
                        
                        @schemas.classproperty
                        def COMMISSION(cls):
                            return cls("commission")
                        
                        @schemas.classproperty
                        def OTHER(cls):
                            return cls("other")
                        
                        @schemas.classproperty
                        def OVERTIME(cls):
                            return cls("overtime")
                        
                        @schemas.classproperty
                        def STIPEND(cls):
                            return cls("stipend")
                        
                        @schemas.classproperty
                        def SIGNING_BONUS(cls):
                            return cls("signing_bonus")
                    __annotations__ = {
                        "employment_id": employment_id,
                        "type": type,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["employment_id"]) -> MetaOapg.properties.employment_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["employment_id", "type", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["employment_id"]) -> typing.Union[MetaOapg.properties.employment_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employment_id", "type", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                employment_id: typing.Union[MetaOapg.properties.employment_id, str, schemas.Unset] = schemas.unset,
                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    employment_id=employment_id,
                    type=type,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                CommonIncentiveParams,
                cls.all_of_1,
            ]

    
    employment_id: MetaOapg.properties.employment_id
    amount: MetaOapg.properties.amount
    effective_date: MetaOapg.properties.effective_date
    amount_tax_type: MetaOapg.properties.amount_tax_type
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount_tax_type"]) -> MetaOapg.properties.amount_tax_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effective_date"]) -> MetaOapg.properties.effective_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment_id"]) -> MetaOapg.properties.employment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "amount_tax_type", "effective_date", "employment_id", "type", "note", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount_tax_type"]) -> MetaOapg.properties.amount_tax_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effective_date"]) -> MetaOapg.properties.effective_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment_id"]) -> MetaOapg.properties.employment_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "amount_tax_type", "effective_date", "employment_id", "type", "note", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employment_id: typing.Union[MetaOapg.properties.employment_id, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        effective_date: typing.Union[MetaOapg.properties.effective_date, str, ],
        amount_tax_type: typing.Union[MetaOapg.properties.amount_tax_type, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateOneTimeIncentiveParams':
        return super().__new__(
            cls,
            *args,
            employment_id=employment_id,
            amount=amount,
            effective_date=effective_date,
            amount_tax_type=amount_tax_type,
            type=type,
            note=note,
            _configuration=_configuration,
            **kwargs,
        )

from remote_python_sdk.model.common_incentive_params import CommonIncentiveParams

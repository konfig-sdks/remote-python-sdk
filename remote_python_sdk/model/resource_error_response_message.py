# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class ResourceErrorResponseMessage(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class code(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "parameter_invalid_date": "PARAMETER_INVALID_DATE",
                        "resource_not_supported_for_country": "RESOURCE_NOT_SUPPORTED_FOR_COUNTRY",
                        "parameter_value_invalid": "PARAMETER_VALUE_INVALID",
                        "request_internal_server_error": "REQUEST_INTERNAL_SERVER_ERROR",
                        "resource_invalid_state": "RESOURCE_INVALID_STATE",
                        "resource_already_exists": "RESOURCE_ALREADY_EXISTS",
                        "resource_not_eligible": "RESOURCE_NOT_ELIGIBLE",
                        "action_invalid": "ACTION_INVALID",
                        "action_unrecognized": "ACTION_UNRECOGNIZED",
                        "parameter_map_empty": "PARAMETER_MAP_EMPTY",
                        "parameter_one_of_required_missing": "PARAMETER_ONE_OF_REQUIRED_MISSING",
                        "parameter_required_missing": "PARAMETER_REQUIRED_MISSING",
                        "parameter_too_many": "PARAMETER_TOO_MANY",
                        "parameter_unknown": "PARAMETER_UNKNOWN",
                        "parameter_value_unknown": "PARAMETER_VALUE_UNKNOWN",
                        "request_body_empty": "REQUEST_BODY_EMPTY",
                    }
                
                @schemas.classproperty
                def PARAMETER_INVALID_DATE(cls):
                    return cls("parameter_invalid_date")
                
                @schemas.classproperty
                def RESOURCE_NOT_SUPPORTED_FOR_COUNTRY(cls):
                    return cls("resource_not_supported_for_country")
                
                @schemas.classproperty
                def PARAMETER_VALUE_INVALID(cls):
                    return cls("parameter_value_invalid")
                
                @schemas.classproperty
                def REQUEST_INTERNAL_SERVER_ERROR(cls):
                    return cls("request_internal_server_error")
                
                @schemas.classproperty
                def RESOURCE_INVALID_STATE(cls):
                    return cls("resource_invalid_state")
                
                @schemas.classproperty
                def RESOURCE_ALREADY_EXISTS(cls):
                    return cls("resource_already_exists")
                
                @schemas.classproperty
                def RESOURCE_NOT_ELIGIBLE(cls):
                    return cls("resource_not_eligible")
                
                @schemas.classproperty
                def ACTION_INVALID(cls):
                    return cls("action_invalid")
                
                @schemas.classproperty
                def ACTION_UNRECOGNIZED(cls):
                    return cls("action_unrecognized")
                
                @schemas.classproperty
                def PARAMETER_MAP_EMPTY(cls):
                    return cls("parameter_map_empty")
                
                @schemas.classproperty
                def PARAMETER_ONE_OF_REQUIRED_MISSING(cls):
                    return cls("parameter_one_of_required_missing")
                
                @schemas.classproperty
                def PARAMETER_REQUIRED_MISSING(cls):
                    return cls("parameter_required_missing")
                
                @schemas.classproperty
                def PARAMETER_TOO_MANY(cls):
                    return cls("parameter_too_many")
                
                @schemas.classproperty
                def PARAMETER_UNKNOWN(cls):
                    return cls("parameter_unknown")
                
                @schemas.classproperty
                def PARAMETER_VALUE_UNKNOWN(cls):
                    return cls("parameter_value_unknown")
                
                @schemas.classproperty
                def REQUEST_BODY_EMPTY(cls):
                    return cls("request_body_empty")
            message = schemas.StrSchema
            
            
            class resource_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'resource_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            resource_type = schemas.StrSchema
            __annotations__ = {
                "code": code,
                "message": message,
                "resource_id": resource_id,
                "resource_type": resource_type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_id"]) -> MetaOapg.properties.resource_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_type"]) -> MetaOapg.properties.resource_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["code", "message", "resource_id", "resource_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_id"]) -> typing.Union[MetaOapg.properties.resource_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_type"]) -> typing.Union[MetaOapg.properties.resource_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["code", "message", "resource_id", "resource_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        resource_id: typing.Union[MetaOapg.properties.resource_id, None, str, schemas.Unset] = schemas.unset,
        resource_type: typing.Union[MetaOapg.properties.resource_type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ResourceErrorResponseMessage':
        return super().__new__(
            cls,
            *args,
            code=code,
            message=message,
            resource_id=resource_id,
            resource_type=resource_type,
            _configuration=_configuration,
            **kwargs,
        )

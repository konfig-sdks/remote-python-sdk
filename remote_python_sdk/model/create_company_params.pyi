# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class CreateCompanyParams(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "country_code",
            "terms_of_service_accepted_at",
            "desired_currency",
            "company_owner_name",
            "name",
            "company_owner_email",
        }
        
        class properties:
            company_owner_email = schemas.StrSchema
            company_owner_name = schemas.StrSchema
            country_code = schemas.StrSchema
            
            
            class desired_currency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AUD(cls):
                    return cls("AUD")
                
                @schemas.classproperty
                def CAD(cls):
                    return cls("CAD")
                
                @schemas.classproperty
                def CHF(cls):
                    return cls("CHF")
                
                @schemas.classproperty
                def DKK(cls):
                    return cls("DKK")
                
                @schemas.classproperty
                def EUR(cls):
                    return cls("EUR")
                
                @schemas.classproperty
                def GBP(cls):
                    return cls("GBP")
                
                @schemas.classproperty
                def JPY(cls):
                    return cls("JPY")
                
                @schemas.classproperty
                def NOK(cls):
                    return cls("NOK")
                
                @schemas.classproperty
                def NZD(cls):
                    return cls("NZD")
                
                @schemas.classproperty
                def SEK(cls):
                    return cls("SEK")
                
                @schemas.classproperty
                def SGD(cls):
                    return cls("SGD")
                
                @schemas.classproperty
                def USD(cls):
                    return cls("USD")
            name = schemas.StrSchema
            terms_of_service_accepted_at = schemas.DateTimeSchema
            address_details = schemas.DictSchema
            bank_account_details = schemas.DictSchema
            email_domain = schemas.StrSchema
            external_id = schemas.StrSchema
            phone_number = schemas.StrSchema
            registration_number = schemas.StrSchema
            tax_number = schemas.StrSchema
            __annotations__ = {
                "company_owner_email": company_owner_email,
                "company_owner_name": company_owner_name,
                "country_code": country_code,
                "desired_currency": desired_currency,
                "name": name,
                "terms_of_service_accepted_at": terms_of_service_accepted_at,
                "address_details": address_details,
                "bank_account_details": bank_account_details,
                "email_domain": email_domain,
                "external_id": external_id,
                "phone_number": phone_number,
                "registration_number": registration_number,
                "tax_number": tax_number,
            }
    
    country_code: MetaOapg.properties.country_code
    terms_of_service_accepted_at: MetaOapg.properties.terms_of_service_accepted_at
    desired_currency: MetaOapg.properties.desired_currency
    company_owner_name: MetaOapg.properties.company_owner_name
    name: MetaOapg.properties.name
    company_owner_email: MetaOapg.properties.company_owner_email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_owner_email"]) -> MetaOapg.properties.company_owner_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company_owner_name"]) -> MetaOapg.properties.company_owner_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["desired_currency"]) -> MetaOapg.properties.desired_currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terms_of_service_accepted_at"]) -> MetaOapg.properties.terms_of_service_accepted_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_details"]) -> MetaOapg.properties.address_details: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank_account_details"]) -> MetaOapg.properties.bank_account_details: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_domain"]) -> MetaOapg.properties.email_domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_id"]) -> MetaOapg.properties.external_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_number"]) -> MetaOapg.properties.phone_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registration_number"]) -> MetaOapg.properties.registration_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_number"]) -> MetaOapg.properties.tax_number: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["company_owner_email", "company_owner_name", "country_code", "desired_currency", "name", "terms_of_service_accepted_at", "address_details", "bank_account_details", "email_domain", "external_id", "phone_number", "registration_number", "tax_number", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_owner_email"]) -> MetaOapg.properties.company_owner_email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company_owner_name"]) -> MetaOapg.properties.company_owner_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["desired_currency"]) -> MetaOapg.properties.desired_currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terms_of_service_accepted_at"]) -> MetaOapg.properties.terms_of_service_accepted_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_details"]) -> typing.Union[MetaOapg.properties.address_details, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank_account_details"]) -> typing.Union[MetaOapg.properties.bank_account_details, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_domain"]) -> typing.Union[MetaOapg.properties.email_domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_id"]) -> typing.Union[MetaOapg.properties.external_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_number"]) -> typing.Union[MetaOapg.properties.phone_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registration_number"]) -> typing.Union[MetaOapg.properties.registration_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_number"]) -> typing.Union[MetaOapg.properties.tax_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["company_owner_email", "company_owner_name", "country_code", "desired_currency", "name", "terms_of_service_accepted_at", "address_details", "bank_account_details", "email_domain", "external_id", "phone_number", "registration_number", "tax_number", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country_code: typing.Union[MetaOapg.properties.country_code, str, ],
        terms_of_service_accepted_at: typing.Union[MetaOapg.properties.terms_of_service_accepted_at, str, datetime, ],
        desired_currency: typing.Union[MetaOapg.properties.desired_currency, str, ],
        company_owner_name: typing.Union[MetaOapg.properties.company_owner_name, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        company_owner_email: typing.Union[MetaOapg.properties.company_owner_email, str, ],
        address_details: typing.Union[MetaOapg.properties.address_details, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        bank_account_details: typing.Union[MetaOapg.properties.bank_account_details, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        email_domain: typing.Union[MetaOapg.properties.email_domain, str, schemas.Unset] = schemas.unset,
        external_id: typing.Union[MetaOapg.properties.external_id, str, schemas.Unset] = schemas.unset,
        phone_number: typing.Union[MetaOapg.properties.phone_number, str, schemas.Unset] = schemas.unset,
        registration_number: typing.Union[MetaOapg.properties.registration_number, str, schemas.Unset] = schemas.unset,
        tax_number: typing.Union[MetaOapg.properties.tax_number, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateCompanyParams':
        return super().__new__(
            cls,
            *args,
            country_code=country_code,
            terms_of_service_accepted_at=terms_of_service_accepted_at,
            desired_currency=desired_currency,
            company_owner_name=company_owner_name,
            name=name,
            company_owner_email=company_owner_email,
            address_details=address_details,
            bank_account_details=bank_account_details,
            email_domain=email_domain,
            external_id=external_id,
            phone_number=phone_number,
            registration_number=registration_number,
            tax_number=tax_number,
            _configuration=_configuration,
            **kwargs,
        )

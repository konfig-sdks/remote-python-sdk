# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class CostCalculatorEmployment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "country",
            "regional_currency_costs",
            "has_extra_statutory_payment",
            "region",
            "employer_currency_costs",
        }
        
        class properties:
        
            @staticmethod
            def country() -> typing.Type['MinimalCountry']:
                return MinimalCountry
        
            @staticmethod
            def employer_currency_costs() -> typing.Type['CostCalculatorCosts']:
                return CostCalculatorCosts
            has_extra_statutory_payment = schemas.BoolSchema
        
            @staticmethod
            def region() -> typing.Type['MinimalRegion']:
                return MinimalRegion
        
            @staticmethod
            def regional_currency_costs() -> typing.Type['CostCalculatorCosts']:
                return CostCalculatorCosts
            __annotations__ = {
                "country": country,
                "employer_currency_costs": employer_currency_costs,
                "has_extra_statutory_payment": has_extra_statutory_payment,
                "region": region,
                "regional_currency_costs": regional_currency_costs,
            }
    
    country: 'MinimalCountry'
    regional_currency_costs: 'CostCalculatorCosts'
    has_extra_statutory_payment: MetaOapg.properties.has_extra_statutory_payment
    region: 'MinimalRegion'
    employer_currency_costs: 'CostCalculatorCosts'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'MinimalCountry': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employer_currency_costs"]) -> 'CostCalculatorCosts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_extra_statutory_payment"]) -> MetaOapg.properties.has_extra_statutory_payment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> 'MinimalRegion': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regional_currency_costs"]) -> 'CostCalculatorCosts': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["country", "employer_currency_costs", "has_extra_statutory_payment", "region", "regional_currency_costs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> 'MinimalCountry': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employer_currency_costs"]) -> 'CostCalculatorCosts': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_extra_statutory_payment"]) -> MetaOapg.properties.has_extra_statutory_payment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> 'MinimalRegion': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regional_currency_costs"]) -> 'CostCalculatorCosts': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["country", "employer_currency_costs", "has_extra_statutory_payment", "region", "regional_currency_costs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country: 'MinimalCountry',
        regional_currency_costs: 'CostCalculatorCosts',
        has_extra_statutory_payment: typing.Union[MetaOapg.properties.has_extra_statutory_payment, bool, ],
        region: 'MinimalRegion',
        employer_currency_costs: 'CostCalculatorCosts',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CostCalculatorEmployment':
        return super().__new__(
            cls,
            *args,
            country=country,
            regional_currency_costs=regional_currency_costs,
            has_extra_statutory_payment=has_extra_statutory_payment,
            region=region,
            employer_currency_costs=employer_currency_costs,
            _configuration=_configuration,
            **kwargs,
        )

from remote_python_sdk.model.cost_calculator_costs import CostCalculatorCosts
from remote_python_sdk.model.minimal_country import MinimalCountry
from remote_python_sdk.model.minimal_region import MinimalRegion

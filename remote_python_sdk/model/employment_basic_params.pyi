# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class EmploymentBasicParams(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Description of the required params to create an employment.
    """


    class MetaOapg:
        required = {
            "country_code",
            "full_name",
            "job_title",
            "personal_email",
        }
        
        class properties:
            country_code = schemas.StrSchema
            full_name = schemas.StrSchema
            job_title = schemas.StrSchema
            personal_email = schemas.StrSchema
        
            @staticmethod
            def basic_information() -> typing.Type['EmploymentBasicParamsBasicInformation']:
                return EmploymentBasicParamsBasicInformation
            provisional_start_date = schemas.StrSchema
            type = schemas.StrSchema
            __annotations__ = {
                "country_code": country_code,
                "full_name": full_name,
                "job_title": job_title,
                "personal_email": personal_email,
                "basic_information": basic_information,
                "provisional_start_date": provisional_start_date,
                "type": type,
            }
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                CreateParams,
                CreateParamsDeprecated,
            ]

    
    country_code: MetaOapg.properties.country_code
    full_name: MetaOapg.properties.full_name
    job_title: MetaOapg.properties.job_title
    personal_email: MetaOapg.properties.personal_email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job_title"]) -> MetaOapg.properties.job_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personal_email"]) -> MetaOapg.properties.personal_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["basic_information"]) -> 'EmploymentBasicParamsBasicInformation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provisional_start_date"]) -> MetaOapg.properties.provisional_start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["country_code", "full_name", "job_title", "personal_email", "basic_information", "provisional_start_date", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job_title"]) -> MetaOapg.properties.job_title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personal_email"]) -> MetaOapg.properties.personal_email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["basic_information"]) -> typing.Union['EmploymentBasicParamsBasicInformation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provisional_start_date"]) -> typing.Union[MetaOapg.properties.provisional_start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["country_code", "full_name", "job_title", "personal_email", "basic_information", "provisional_start_date", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country_code: typing.Union[MetaOapg.properties.country_code, str, ],
        full_name: typing.Union[MetaOapg.properties.full_name, str, ],
        job_title: typing.Union[MetaOapg.properties.job_title, str, ],
        personal_email: typing.Union[MetaOapg.properties.personal_email, str, ],
        basic_information: typing.Union['EmploymentBasicParamsBasicInformation', schemas.Unset] = schemas.unset,
        provisional_start_date: typing.Union[MetaOapg.properties.provisional_start_date, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmploymentBasicParams':
        return super().__new__(
            cls,
            *args,
            country_code=country_code,
            full_name=full_name,
            job_title=job_title,
            personal_email=personal_email,
            basic_information=basic_information,
            provisional_start_date=provisional_start_date,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from remote_python_sdk.model.create_params import CreateParams
from remote_python_sdk.model.create_params_deprecated import CreateParamsDeprecated
from remote_python_sdk.model.employment_basic_params_basic_information import EmploymentBasicParamsBasicInformation

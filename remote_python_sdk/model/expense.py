# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from remote_python_sdk import schemas  # noqa: F401


class Expense(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Expense
    """


    class MetaOapg:
        required = {
            "employment_id",
            "tax_amount",
            "amount",
            "converted_amount",
            "converted_currency",
            "expense_date",
            "currency",
            "id",
            "title",
            "converted_tax_amount",
        }
        
        class properties:
            title = schemas.StrSchema
            amount = schemas.IntSchema
            converted_amount = schemas.IntSchema
        
            @staticmethod
            def converted_currency() -> typing.Type['CurrencyDefinition']:
                return CurrencyDefinition
            converted_tax_amount = schemas.IntSchema
        
            @staticmethod
            def currency() -> typing.Type['CurrencyDefinition']:
                return CurrencyDefinition
            employment_id = schemas.StrSchema
            expense_date = schemas.DateSchema
            id = schemas.StrSchema
            tax_amount = schemas.IntSchema
            
            
            class category(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "education_training": "EDUCATION_TRAINING",
                        "home_office": "HOME_OFFICE",
                        "meals": "MEALS",
                        "other": "OTHER",
                        "phone_utilities": "PHONE_UTILITIES",
                        "tech_equipment": "TECH_EQUIPMENT",
                        "travel": "TRAVEL",
                        "coworking": "COWORKING",
                    }
                
                @schemas.classproperty
                def EDUCATION_TRAINING(cls):
                    return cls("education_training")
                
                @schemas.classproperty
                def HOME_OFFICE(cls):
                    return cls("home_office")
                
                @schemas.classproperty
                def MEALS(cls):
                    return cls("meals")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
                
                @schemas.classproperty
                def PHONE_UTILITIES(cls):
                    return cls("phone_utilities")
                
                @schemas.classproperty
                def TECH_EQUIPMENT(cls):
                    return cls("tech_equipment")
                
                @schemas.classproperty
                def TRAVEL(cls):
                    return cls("travel")
                
                @schemas.classproperty
                def COWORKING(cls):
                    return cls("coworking")
            
            
            class invoice_period(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invoice_period':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class notes(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notes':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class reason(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reason':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class receipts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 5
                    
                    @staticmethod
                    def items() -> typing.Type['File']:
                        return File
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['File'], typing.List['File']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'receipts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'File':
                    return super().__getitem__(i)
            
            
            class reviewed_at(
                schemas.DateBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, date, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reviewed_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def reviewer() -> typing.Type['ExpenseReviewer']:
                return ExpenseReviewer
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "canceled": "CANCELED",
                        "pending": "PENDING",
                        "declined": "DECLINED",
                        "approved": "APPROVED",
                        "processing": "PROCESSING",
                        "reimbursed": "REIMBURSED",
                    }
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("canceled")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("pending")
                
                @schemas.classproperty
                def DECLINED(cls):
                    return cls("declined")
                
                @schemas.classproperty
                def APPROVED(cls):
                    return cls("approved")
                
                @schemas.classproperty
                def PROCESSING(cls):
                    return cls("processing")
                
                @schemas.classproperty
                def REIMBURSED(cls):
                    return cls("reimbursed")
            __annotations__ = {
                "title": title,
                "amount": amount,
                "converted_amount": converted_amount,
                "converted_currency": converted_currency,
                "converted_tax_amount": converted_tax_amount,
                "currency": currency,
                "employment_id": employment_id,
                "expense_date": expense_date,
                "id": id,
                "tax_amount": tax_amount,
                "category": category,
                "invoice_period": invoice_period,
                "notes": notes,
                "reason": reason,
                "receipts": receipts,
                "reviewed_at": reviewed_at,
                "reviewer": reviewer,
                "status": status,
            }
    
    employment_id: MetaOapg.properties.employment_id
    tax_amount: MetaOapg.properties.tax_amount
    amount: MetaOapg.properties.amount
    converted_amount: MetaOapg.properties.converted_amount
    converted_currency: 'CurrencyDefinition'
    expense_date: MetaOapg.properties.expense_date
    currency: 'CurrencyDefinition'
    id: MetaOapg.properties.id
    title: MetaOapg.properties.title
    converted_tax_amount: MetaOapg.properties.converted_tax_amount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["converted_amount"]) -> MetaOapg.properties.converted_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["converted_currency"]) -> 'CurrencyDefinition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["converted_tax_amount"]) -> MetaOapg.properties.converted_tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'CurrencyDefinition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employment_id"]) -> MetaOapg.properties.employment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expense_date"]) -> MetaOapg.properties.expense_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_amount"]) -> MetaOapg.properties.tax_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_period"]) -> MetaOapg.properties.invoice_period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receipts"]) -> MetaOapg.properties.receipts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewed_at"]) -> MetaOapg.properties.reviewed_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewer"]) -> 'ExpenseReviewer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "amount", "converted_amount", "converted_currency", "converted_tax_amount", "currency", "employment_id", "expense_date", "id", "tax_amount", "category", "invoice_period", "notes", "reason", "receipts", "reviewed_at", "reviewer", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["converted_amount"]) -> MetaOapg.properties.converted_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["converted_currency"]) -> 'CurrencyDefinition': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["converted_tax_amount"]) -> MetaOapg.properties.converted_tax_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> 'CurrencyDefinition': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employment_id"]) -> MetaOapg.properties.employment_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expense_date"]) -> MetaOapg.properties.expense_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_amount"]) -> MetaOapg.properties.tax_amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_period"]) -> typing.Union[MetaOapg.properties.invoice_period, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receipts"]) -> typing.Union[MetaOapg.properties.receipts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewed_at"]) -> typing.Union[MetaOapg.properties.reviewed_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewer"]) -> typing.Union['ExpenseReviewer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "amount", "converted_amount", "converted_currency", "converted_tax_amount", "currency", "employment_id", "expense_date", "id", "tax_amount", "category", "invoice_period", "notes", "reason", "receipts", "reviewed_at", "reviewer", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employment_id: typing.Union[MetaOapg.properties.employment_id, str, ],
        tax_amount: typing.Union[MetaOapg.properties.tax_amount, decimal.Decimal, int, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
        converted_amount: typing.Union[MetaOapg.properties.converted_amount, decimal.Decimal, int, ],
        converted_currency: 'CurrencyDefinition',
        expense_date: typing.Union[MetaOapg.properties.expense_date, str, date, ],
        currency: 'CurrencyDefinition',
        id: typing.Union[MetaOapg.properties.id, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        converted_tax_amount: typing.Union[MetaOapg.properties.converted_tax_amount, decimal.Decimal, int, ],
        category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
        invoice_period: typing.Union[MetaOapg.properties.invoice_period, None, str, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, None, str, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, None, str, schemas.Unset] = schemas.unset,
        receipts: typing.Union[MetaOapg.properties.receipts, list, tuple, schemas.Unset] = schemas.unset,
        reviewed_at: typing.Union[MetaOapg.properties.reviewed_at, None, str, date, schemas.Unset] = schemas.unset,
        reviewer: typing.Union['ExpenseReviewer', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Expense':
        return super().__new__(
            cls,
            *args,
            employment_id=employment_id,
            tax_amount=tax_amount,
            amount=amount,
            converted_amount=converted_amount,
            converted_currency=converted_currency,
            expense_date=expense_date,
            currency=currency,
            id=id,
            title=title,
            converted_tax_amount=converted_tax_amount,
            category=category,
            invoice_period=invoice_period,
            notes=notes,
            reason=reason,
            receipts=receipts,
            reviewed_at=reviewed_at,
            reviewer=reviewer,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from remote_python_sdk.model.currency_definition import CurrencyDefinition
from remote_python_sdk.model.expense_reviewer import ExpenseReviewer
from remote_python_sdk.model.file import File

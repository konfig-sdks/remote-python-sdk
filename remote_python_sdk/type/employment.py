# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team — and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING

from remote_python_sdk.type.country import Country
from remote_python_sdk.type.employment_bank_account_details import EmploymentBankAccountDetails
from remote_python_sdk.type.employment_lifecycle_stage import EmploymentLifecycleStage
from remote_python_sdk.type.employment_status import EmploymentStatus
from remote_python_sdk.type.file import File
from remote_python_sdk.type.onboarding_tasks import OnboardingTasks
from remote_python_sdk.type.pricing_plan_details import PricingPlanDetails
from remote_python_sdk.type.user_status import UserStatus

class RequiredEmployment(TypedDict):
    # Home address information. Its properties may vary depending on the country.
    address_details: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Administrative information. Its properties may vary depending on the country.
    administrative_details: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    bank_account_details: EmploymentBankAccountDetails

    # Billing address information. Its properties may vary depending on the country.
    billing_address_details: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    company_id: str

    # Contract information. Its properties may vary depending on the country.
    contract_details: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    country: Country

    created_at: str

    # Emergency contact information. Its properties may vary depending on the country.
    emergency_contact_details: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    employment_lifecycle_stage: EmploymentLifecycleStage

    files: typing.List[File]

    full_name: str

    id: str

    job_title: str

    onboarding_tasks: OnboardingTasks

    # Personal details information. Its properties may vary depending on the country.
    personal_details: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    personal_email: str

    pricing_plan_details: PricingPlanDetails

    status: EmploymentStatus

    # For the employment types `contractor`, `global_payroll_employee` and `direct_employee`, only [List employments](https://gateway.remote.com/v1/docs/openapi.html) and [Show employment](https://gateway.remote.com/v1/docs/openapi.html) operations are available. 
    type: str

    updated_at: datetime

class OptionalEmployment(TypedDict, total=False):
    active_contract_id: str

    # Employment basic information. Its properties may vary depending on the country. 
    basic_information: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Name of related department, if any. Otherwise, null.
    department: typing.Optional[str]

    # Unique ID of related department, if any. Otherwise, null.
    department_id: typing.Optional[str]

    manager: str

    probation_period_end_date: date

    # Indicates the expected start date of the employee or contractor.  Required for employees, but optional for contractors. Date format is in ISO8601 without the time component.  See the **Date and Time Format** documentation for more details on how the Remote API works with dates. 
    provisional_start_date: date

    # The date the employee first started working for your company. If you don’t include a seniority date, the employee’s start date with Remote will be deemed as the start of the employee’s seniority.  **Example**: Your employee started working for your company on Feb 1, 2022. On Aug 1, 2022, you transferred the employee to Remote and started managing them on the platform. Feb 1, 2022 would be their seniority date. Aug 1, 2022 would be their starting date. 
    seniority_date: datetime

    user_status: UserStatus

class Employment(RequiredEmployment, OptionalEmployment):
    pass

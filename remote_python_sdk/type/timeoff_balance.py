# coding: utf-8

"""
    Remote API

    Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING

from remote_python_sdk.type.timeoff_balance_taken import TimeoffBalanceTaken
from remote_python_sdk.type.timeoff_balance_upcoming_approved import TimeoffBalanceUpcomingApproved
from remote_python_sdk.type.timeoff_balance_upcoming_requested import TimeoffBalanceUpcomingRequested
from remote_python_sdk.type.timeoff_entitlement import TimeoffEntitlement

class RequiredTimeoffBalance(TypedDict):
    # Leave entitlement type for the employment, based on their contract.  The value of this field is `fixed` when the employment has a fixed limit of time off days to be taken, and `unlimited` otherwise. 
    contractual_leave_entitlement_type: str

    taken: typing.Optional[TimeoffBalanceTaken]

    # A list of individual time off entitlements for the employment. This list gives more granular details for the type of time off that's available to the employment. 
    timeoff_entitlements: typing.List[TimeoffEntitlement]

    upcoming_approved: typing.Optional[TimeoffBalanceUpcomingApproved]

    upcoming_requested: typing.Optional[TimeoffBalanceUpcomingRequested]

    working_hours_per_day: int

class OptionalTimeoffBalance(TypedDict, total=False):
    # Number of time off days for the employment, based on their contract.  The value of this field is `0` if the employment's contract does not include that information. 
    contractual_entitled: int

    # Number of time off days for the employment, based on their contract and any additional time off that's granted to them.  This is the sum of all `entitled` fields in the `leave_entitlements` array, but does not take the hours into account. 
    total_entitled_days: int

class TimeoffBalance(RequiredTimeoffBalance, OptionalTimeoffBalance):
    pass
